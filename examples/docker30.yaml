info:
  description: >
    The Engine API is an HTTP API served by Docker Engine. It is the API the
    Docker client uses to communicate with the Engine, so everything the Docker
    client can do can be done with the API.


    Most of the client's commands map directly to API endpoints (e.g. `docker
    ps` is `GET /containers/json`). The notable exception is running containers,
    which consists of several API calls.


    # Errors


    The API uses standard HTTP status codes to indicate the success or failure
    of the API call. The body of the response will be JSON in the following
    format:


    ```

    {
      "message": "page not found"
    }

    ```


    # Versioning


    The API is usually changed in each release of Docker, so API calls are
    versioned to ensure that clients don't break.


    For Docker Engine 1.13, the API version is 1.25. To lock to this version,
    you prefix the URL with `/v1.25`. For example, calling `/info` is the same
    as calling `/v1.25/info`.


    Engine releases in the near future should support this version of the API,
    so your client will continue to work even if it is talking to a newer
    Engine.


    In previous versions of Docker, it was possible to access the API without
    providing a version. This behaviour is now deprecated will be removed in a
    future version of Docker.


    The API uses an open schema model, which means server may add extra
    properties to responses. Likewise, the server will ignore any extra query
    parameters and request body properties. When you write clients, you need to
    ignore additional properties in responses to ensure they do not break when
    talking to newer Docker daemons.


    This documentation is for version 1.25 of the API, which was introduced with
    Docker 1.13. Use this table to find documentation for previous versions of
    the API:


    Docker version  | API version | Changes

    ----------------|-------------|---------

    1.12.x | [1.24](https://docs.docker.com/engine/api/v1.24/) | [API
    changes](https://docs.docker.com/engine/api/version-history/#v1-24-api-changes)

    1.11.x | [1.23](https://docs.docker.com/engine/api/v1.23/) | [API
    changes](https://docs.docker.com/engine/api/version-history/#v1-23-api-changes)

    1.10.x | [1.22](https://docs.docker.com/engine/api/v1.22/) | [API
    changes](https://docs.docker.com/engine/api/version-history/#v1-22-api-changes)

    1.9.x | [1.21](https://docs.docker.com/engine/api/v1.21/) | [API
    changes](https://docs.docker.com/engine/api/version-history/#v1-21-api-changes)

    1.8.x | [1.20](https://docs.docker.com/engine/api/v1.20/) | [API
    changes](https://docs.docker.com/engine/api/version-history/#v1-20-api-changes)

    1.7.x | [1.19](https://docs.docker.com/engine/api/v1.19/) | [API
    changes](https://docs.docker.com/engine/api/version-history/#v1-19-api-changes)

    1.6.x | [1.18](https://docs.docker.com/engine/api/v1.18/) | [API
    changes](https://docs.docker.com/engine/api/version-history/#v1-18-api-changes)


    # Authentication


    Authentication for registries is handled client side. The client has to send
    authentication details to various endpoints that need to communicate with
    registries, such as `POST /images/(name)/push`. These are sent as
    `X-Registry-Auth` header as a Base64 encoded (JSON) string with the
    following structure:


    ```

    {
      "username": "string",
      "password": "string",
      "email": "string",
      "serveraddress": "string"
    }

    ```


    The `serveraddress` is a domain/IP without a protocol. Throughout this
    structure, double quotes are required.


    If you have already got an identity token from the [`/auth`
    endpoint](#operation/SystemAuth), you can just pass this instead of
    credentials:


    ```

    {
      "identitytoken": "9cbaf023786cd7..."
    }

    ```
  title: Docker Engine API
  version: '1.25'
  x-logo:
    url: 'https://docs.docker.com/images/logo-docker-main.png'
paths:
  /_ping:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                example: OK
                type: string
            text/plain:
              schema:
                example: OK
                type: string
          description: no error
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      tags:
        - System
      description: >-
        This is a dummy endpoint you can use to test if the server is
        accessible.
      operationId: SystemPing
      summary: Ping
  /auth:
    post:
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    IdentityToken: 9cbaf023786cd7...
                    Status: Login Succeeded
              schema:
                properties:
                  IdentityToken:
                    description: >-
                      An opaque token used to authenticate a user after a
                      successful login
                    nullable: false
                    type: string
                  Status:
                    description: The status of the authentication
                    nullable: false
                    type: string
                required:
                  - Status
                type: object
            text/plain:
              schema:
                properties:
                  IdentityToken:
                    description: >-
                      An opaque token used to authenticate a user after a
                      successful login
                    nullable: false
                    type: string
                  Status:
                    description: The status of the authentication
                    nullable: false
                    type: string
                required:
                  - Status
                type: object
          description: An identity token was generated successfully.
        '204':
          description: No error
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      tags:
        - System
      description: >-
        Validate credentials for a registry and, if available, get an identity
        token for accessing the registry without password.
      operationId: SystemAuth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthConfig'
          text/plain:
            schema:
              $ref: '#/components/schemas/AuthConfig'
        description: Authentication to check
      summary: Check auth configuration
  /build:
    post:
      parameters:
        - description: >-
            Path within the build context to the `Dockerfile`. This is ignored
            if `remote` is specified and points to an external `Dockerfile`.
          in: query
          name: dockerfile
          schema:
            default: Dockerfile
            type: string
        - description: >-
            A name and optional tag to apply to the image in the `name:tag`
            format. If you omit the tag the default `latest` value is assumed.
            You can provide several `t` parameters.
          in: query
          name: t
          schema:
            type: string
        - description: >-
            A Git repository URI or HTTP/HTTPS context URI. If the URI points to
            a single text file, the file’s contents are placed into a file
            called `Dockerfile` and the image is built from that file. If the
            URI points to a tarball, the file is downloaded by the daemon and
            the contents therein used as the context for the build. If the URI
            points to a tarball and the `dockerfile` parameter is also
            specified, there must be a file with the corresponding path inside
            the tarball.
          in: query
          name: remote
          schema:
            type: string
        - description: Suppress verbose build output.
          in: query
          name: q
          schema:
            default: false
            type: boolean
        - description: Do not use the cache when building the image.
          in: query
          name: nocache
          schema:
            default: false
            type: boolean
        - description: JSON array of images used for build cache resolution.
          in: query
          name: cachefrom
          schema:
            type: string
        - description: Attempt to pull the image even if an older image exists locally.
          in: query
          name: pull
          schema:
            type: string
        - description: Remove intermediate containers after a successful build.
          in: query
          name: rm
          schema:
            default: true
            type: boolean
        - description: 'Always remove intermediate containers, even upon failure.'
          in: query
          name: forcerm
          schema:
            default: false
            type: boolean
        - description: Set memory limit for build.
          in: query
          name: memory
          schema:
            type: integer
        - description: Total memory (memory + swap). Set as `-1` to disable swap.
          in: query
          name: memswap
          schema:
            type: integer
        - description: CPU shares (relative weight).
          in: query
          name: cpushares
          schema:
            type: integer
        - description: 'CPUs in which to allow execution (e.g., `0-3`, `0,1`).'
          in: query
          name: cpusetcpus
          schema:
            type: string
        - description: The length of a CPU period in microseconds.
          in: query
          name: cpuperiod
          schema:
            type: integer
        - description: Microseconds of CPU time that the container can get in a CPU period.
          in: query
          name: cpuquota
          schema:
            type: integer
        - description: >-
            JSON map of string pairs for build-time variables. Users pass these
            values at build-time. Docker uses the buildargs as the environment
            context for commands run via the `Dockerfile` RUN instruction, or
            for variable expansion in other `Dockerfile` instructions. This is
            not meant for passing secret values. [Read more about the buildargs
            instruction.](https://docs.docker.com/engine/reference/builder/#arg)
          in: query
          name: buildargs
          schema:
            type: integer
        - description: >-
            Size of `/dev/shm` in bytes. The size must be greater than 0. If
            omitted the system uses 64MB.
          in: query
          name: shmsize
          schema:
            type: integer
        - description: >-
            Squash the resulting images layers into a single layer.
            *(Experimental release only.)*
          in: query
          name: squash
          schema:
            type: boolean
        - description: >-
            Arbitrary key/value labels to set on the image, as a JSON map of
            string pairs.
          in: query
          name: labels
          schema:
            type: string
        - description: >-
            Sets the networking mode for the run commands during build.
            Supported standard values are: `bridge`, `host`, `none`, and
            `container:<name|id>`. Any other value is taken as a custom
            network's name to which this container should connect to.
          in: query
          name: networkmode
          schema:
            type: string
        - in: header
          name: Content-type
          schema:
            default: application/tar
            enum:
              - application/tar
            type: string
        - description: >
            This is a base64-encoded JSON object with auth configurations for
            multiple registries that a build may refer to.


            The key is a registry URL, and the value is an auth configuration
            object, [as described in the authentication
            section](#section/Authentication). For example:


            ```

            {
              "docker.example.com": {
                "username": "janedoe",
                "password": "hunter2"
              },
              "https://index.docker.io/v1/": {
                "username": "mobydock",
                "password": "conta1n3rize14"
              }
            }

            ```


            Only the registry domain name (and port if not the default 443) are
            required. However, for legacy reasons, the Docker Hub registry must
            be specified with both a `https://` prefix and a `/v1/` suffix even
            though Docker will prefer to use the v2 registry API.
          in: header
          name: X-Registry-Config
          schema:
            type: string
      responses:
        '200':
          description: no error
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      tags:
        - Image
      description: >
        Build an image from a tar archive with a `Dockerfile` in it.


        The `Dockerfile` specifies how the image is built from the tar archive.
        It is typically in the archive's root, but can be at a different path or
        have a different name by specifying the `dockerfile` parameter. [See the
        `Dockerfile` reference for more
        information](https://docs.docker.com/engine/reference/builder/).


        The Docker daemon performs a preliminary validation of the `Dockerfile`
        before starting the build, and returns an error if the syntax is
        incorrect. After that, each instruction is run one-by-one until the ID
        of the new image is output.


        The build is canceled if the client drops the connection by quitting or
        being killed.
      operationId: ImageBuild
      requestBody:
        content:
          application/json:
            schema:
              format: binary
              type: string
          application/octet-stream:
            schema:
              format: binary
              type: string
          text/plain:
            schema:
              format: binary
              type: string
        description: >-
          A tar archive compressed with one of the following algorithms:
          identity (no compression), gzip, bzip2, xz.
      summary: Build an image
  /commit:
    post:
      parameters:
        - description: The ID or name of the container to commit
          in: query
          name: container
          schema:
            type: string
        - description: Repository name for the created image
          in: query
          name: repo
          schema:
            type: string
        - description: Tag name for the create image
          in: query
          name: tag
          schema:
            type: string
        - description: Commit message
          in: query
          name: comment
          schema:
            type: string
        - description: >-
            Author of the image (e.g., `John Hannibal Smith
            <hannibal@a-team.com>`)
          in: query
          name: author
          schema:
            type: string
        - description: Whether to pause the container before committing
          in: query
          name: pause
          schema:
            default: true
            type: boolean
        - description: '`Dockerfile` instructions to apply while committing'
          in: query
          name: changes
          schema:
            type: string
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/IdResponse'
          description: no error
        '404':
          content:
            application/json:
              examples:
                response:
                  value:
                    message: 'No such container: c2ada9df5af8'
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: no such container
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      tags:
        - Image
      operationId: ImageCommit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Config'
          text/plain:
            schema:
              $ref: '#/components/schemas/Config'
        description: The container configuration
      summary: Create a new image from a container
  /containers/create:
    post:
      parameters:
        - description: >-
            Assign the specified name to the container. Must match
            `/?[a-zA-Z0-9_-]+`.
          in: query
          name: name
          schema:
            pattern: '/?[a-zA-Z0-9_-]+'
            type: string
      responses:
        '201':
          content:
            application/json:
              examples:
                response:
                  value:
                    Id: e90e34656806
                    Warnings: []
              schema:
                properties:
                  Id:
                    description: The ID of the created container
                    nullable: false
                    type: string
                  Warnings:
                    description: Warnings encountered when creating the container
                    items:
                      type: string
                    nullable: false
                    type: array
                required:
                  - Id
                  - Warnings
                type: object
            text/plain:
              schema:
                properties:
                  Id:
                    description: The ID of the created container
                    nullable: false
                    type: string
                  Warnings:
                    description: Warnings encountered when creating the container
                    items:
                      type: string
                    nullable: false
                    type: array
                required:
                  - Id
                  - Warnings
                type: object
          description: Container created successfully
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: bad parameter
        '404':
          content:
            application/json:
              examples:
                response:
                  value:
                    message: 'No such container: c2ada9df5af8'
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: no such container
        '406':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: impossible to attach
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: conflict
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      tags:
        - Container
      operationId: ContainerCreate
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Config'
                - properties:
                    HostConfig:
                      $ref: '#/components/schemas/HostConfig'
                    NetworkingConfig:
                      description: This container's networking configuration.
                      properties:
                        EndpointsConfig:
                          additionalProperties:
                            $ref: '#/components/schemas/EndpointSettings'
                          description: >-
                            A mapping of network name to endpoint configuration
                            for that network.
                          type: object
                      type: object
                  type: object
              example:
                AttachStderr: true
                AttachStdin: false
                AttachStdout: true
                Cmd:
                  - date
                Domainname: ''
                Entrypoint: ''
                Env:
                  - FOO=bar
                  - BAZ=quux
                ExposedPorts:
                  22/tcp: {}
                HostConfig:
                  AutoRemove: true
                  Binds:
                    - '/tmp:/tmp'
                  BlkioDeviceReadBps:
                    - {}
                  BlkioDeviceReadIOps:
                    - {}
                  BlkioDeviceWriteBps:
                    - {}
                  BlkioDeviceWriteIOps:
                    - {}
                  BlkioWeight: 300
                  BlkioWeightDevice:
                    - {}
                  CapAdd:
                    - NET_ADMIN
                  CapDrop:
                    - MKNOD
                  CgroupParent: ''
                  CpuPercent: 80
                  CpuPeriod: 100000
                  CpuQuota: 50000
                  CpuRealtimePeriod: 1000000
                  CpuRealtimeRuntime: 10000
                  CpuShares: 512
                  CpusetCpus: '0,1'
                  CpusetMems: '0,1'
                  Devices: []
                  Dns:
                    - 8.8.8.8
                  DnsOptions:
                    - ''
                  DnsSearch:
                    - ''
                  GroupAdd:
                    - newgroup
                  KernelMemory: 0
                  Links:
                    - 'redis3:redis'
                  LogConfig:
                    Config: {}
                    Type: json-file
                  MaximumIOBps: 0
                  MaximumIOps: 0
                  Memory: 0
                  MemoryReservation: 0
                  MemorySwap: 0
                  MemorySwappiness: 60
                  NanoCPUs: 500000
                  NetworkMode: bridge
                  OomKillDisable: false
                  OomScoreAdj: 500
                  PidMode: ''
                  PidsLimit: -1
                  PortBindings:
                    22/tcp:
                      - HostPort: '11022'
                  Privileged: false
                  PublishAllPorts: false
                  ReadonlyRootfs: false
                  RestartPolicy:
                    MaximumRetryCount: 0
                    Name: ''
                  SecurityOpt: []
                  ShmSize: 67108864
                  StorageOpt: {}
                  Ulimits:
                    - {}
                  VolumeDriver: ''
                  VolumesFrom:
                    - parent
                    - 'other:ro'
                Hostname: ''
                Image: ubuntu
                Labels:
                  com.example.license: GPL
                  com.example.vendor: Acme
                  com.example.version: '1.0'
                MacAddress: '12:34:56:78:9a:bc'
                NetworkDisabled: false
                NetworkingConfig:
                  EndpointsConfig:
                    isolated_nw:
                      Aliases:
                        - server_x
                        - server_y
                      IPAMConfig:
                        IPv4Address: 172.20.30.33
                        IPv6Address: '2001:db8:abcd::3033'
                        LinkLocalIPs:
                          - 169.254.34.68
                          - 'fe80::3468'
                      Links:
                        - container_1
                        - container_2
                OpenStdin: false
                StdinOnce: false
                StopSignal: SIGTERM
                StopTimeout: 10
                Tty: false
                User: ''
                Volumes:
                  /volumes/data: {}
                WorkingDir: ''
          application/octet-stream:
            schema:
              allOf:
                - $ref: '#/components/schemas/Config'
                - properties:
                    HostConfig:
                      $ref: '#/components/schemas/HostConfig'
                    NetworkingConfig:
                      description: This container's networking configuration.
                      properties:
                        EndpointsConfig:
                          additionalProperties:
                            $ref: '#/components/schemas/EndpointSettings'
                          description: >-
                            A mapping of network name to endpoint configuration
                            for that network.
                          type: object
                      type: object
                  type: object
              example:
                AttachStderr: true
                AttachStdin: false
                AttachStdout: true
                Cmd:
                  - date
                Domainname: ''
                Entrypoint: ''
                Env:
                  - FOO=bar
                  - BAZ=quux
                ExposedPorts:
                  22/tcp: {}
                HostConfig:
                  AutoRemove: true
                  Binds:
                    - '/tmp:/tmp'
                  BlkioDeviceReadBps:
                    - {}
                  BlkioDeviceReadIOps:
                    - {}
                  BlkioDeviceWriteBps:
                    - {}
                  BlkioDeviceWriteIOps:
                    - {}
                  BlkioWeight: 300
                  BlkioWeightDevice:
                    - {}
                  CapAdd:
                    - NET_ADMIN
                  CapDrop:
                    - MKNOD
                  CgroupParent: ''
                  CpuPercent: 80
                  CpuPeriod: 100000
                  CpuQuota: 50000
                  CpuRealtimePeriod: 1000000
                  CpuRealtimeRuntime: 10000
                  CpuShares: 512
                  CpusetCpus: '0,1'
                  CpusetMems: '0,1'
                  Devices: []
                  Dns:
                    - 8.8.8.8
                  DnsOptions:
                    - ''
                  DnsSearch:
                    - ''
                  GroupAdd:
                    - newgroup
                  KernelMemory: 0
                  Links:
                    - 'redis3:redis'
                  LogConfig:
                    Config: {}
                    Type: json-file
                  MaximumIOBps: 0
                  MaximumIOps: 0
                  Memory: 0
                  MemoryReservation: 0
                  MemorySwap: 0
                  MemorySwappiness: 60
                  NanoCPUs: 500000
                  NetworkMode: bridge
                  OomKillDisable: false
                  OomScoreAdj: 500
                  PidMode: ''
                  PidsLimit: -1
                  PortBindings:
                    22/tcp:
                      - HostPort: '11022'
                  Privileged: false
                  PublishAllPorts: false
                  ReadonlyRootfs: false
                  RestartPolicy:
                    MaximumRetryCount: 0
                    Name: ''
                  SecurityOpt: []
                  ShmSize: 67108864
                  StorageOpt: {}
                  Ulimits:
                    - {}
                  VolumeDriver: ''
                  VolumesFrom:
                    - parent
                    - 'other:ro'
                Hostname: ''
                Image: ubuntu
                Labels:
                  com.example.license: GPL
                  com.example.vendor: Acme
                  com.example.version: '1.0'
                MacAddress: '12:34:56:78:9a:bc'
                NetworkDisabled: false
                NetworkingConfig:
                  EndpointsConfig:
                    isolated_nw:
                      Aliases:
                        - server_x
                        - server_y
                      IPAMConfig:
                        IPv4Address: 172.20.30.33
                        IPv6Address: '2001:db8:abcd::3033'
                        LinkLocalIPs:
                          - 169.254.34.68
                          - 'fe80::3468'
                      Links:
                        - container_1
                        - container_2
                OpenStdin: false
                StdinOnce: false
                StopSignal: SIGTERM
                StopTimeout: 10
                Tty: false
                User: ''
                Volumes:
                  /volumes/data: {}
                WorkingDir: ''
          text/plain:
            schema:
              allOf:
                - $ref: '#/components/schemas/Config'
                - properties:
                    HostConfig:
                      $ref: '#/components/schemas/HostConfig'
                    NetworkingConfig:
                      description: This container's networking configuration.
                      properties:
                        EndpointsConfig:
                          additionalProperties:
                            $ref: '#/components/schemas/EndpointSettings'
                          description: >-
                            A mapping of network name to endpoint configuration
                            for that network.
                          type: object
                      type: object
                  type: object
              example:
                AttachStderr: true
                AttachStdin: false
                AttachStdout: true
                Cmd:
                  - date
                Domainname: ''
                Entrypoint: ''
                Env:
                  - FOO=bar
                  - BAZ=quux
                ExposedPorts:
                  22/tcp: {}
                HostConfig:
                  AutoRemove: true
                  Binds:
                    - '/tmp:/tmp'
                  BlkioDeviceReadBps:
                    - {}
                  BlkioDeviceReadIOps:
                    - {}
                  BlkioDeviceWriteBps:
                    - {}
                  BlkioDeviceWriteIOps:
                    - {}
                  BlkioWeight: 300
                  BlkioWeightDevice:
                    - {}
                  CapAdd:
                    - NET_ADMIN
                  CapDrop:
                    - MKNOD
                  CgroupParent: ''
                  CpuPercent: 80
                  CpuPeriod: 100000
                  CpuQuota: 50000
                  CpuRealtimePeriod: 1000000
                  CpuRealtimeRuntime: 10000
                  CpuShares: 512
                  CpusetCpus: '0,1'
                  CpusetMems: '0,1'
                  Devices: []
                  Dns:
                    - 8.8.8.8
                  DnsOptions:
                    - ''
                  DnsSearch:
                    - ''
                  GroupAdd:
                    - newgroup
                  KernelMemory: 0
                  Links:
                    - 'redis3:redis'
                  LogConfig:
                    Config: {}
                    Type: json-file
                  MaximumIOBps: 0
                  MaximumIOps: 0
                  Memory: 0
                  MemoryReservation: 0
                  MemorySwap: 0
                  MemorySwappiness: 60
                  NanoCPUs: 500000
                  NetworkMode: bridge
                  OomKillDisable: false
                  OomScoreAdj: 500
                  PidMode: ''
                  PidsLimit: -1
                  PortBindings:
                    22/tcp:
                      - HostPort: '11022'
                  Privileged: false
                  PublishAllPorts: false
                  ReadonlyRootfs: false
                  RestartPolicy:
                    MaximumRetryCount: 0
                    Name: ''
                  SecurityOpt: []
                  ShmSize: 67108864
                  StorageOpt: {}
                  Ulimits:
                    - {}
                  VolumeDriver: ''
                  VolumesFrom:
                    - parent
                    - 'other:ro'
                Hostname: ''
                Image: ubuntu
                Labels:
                  com.example.license: GPL
                  com.example.vendor: Acme
                  com.example.version: '1.0'
                MacAddress: '12:34:56:78:9a:bc'
                NetworkDisabled: false
                NetworkingConfig:
                  EndpointsConfig:
                    isolated_nw:
                      Aliases:
                        - server_x
                        - server_y
                      IPAMConfig:
                        IPv4Address: 172.20.30.33
                        IPv6Address: '2001:db8:abcd::3033'
                        LinkLocalIPs:
                          - 169.254.34.68
                          - 'fe80::3468'
                      Links:
                        - container_1
                        - container_2
                OpenStdin: false
                StdinOnce: false
                StopSignal: SIGTERM
                StopTimeout: 10
                Tty: false
                User: ''
                Volumes:
                  /volumes/data: {}
                WorkingDir: ''
        description: Container to create
        required: true
      summary: Create a container
  /containers/json:
    get:
      parameters:
        - description: 'Return all containers. By default, only running containers are shown'
          in: query
          name: all
          schema:
            default: false
            type: boolean
        - description: >-
            Return this number of most recently created containers, including
            non-running ones.
          in: query
          name: limit
          schema:
            type: integer
        - description: Return the size of container as fields `SizeRw` and `SizeRootFs`.
          in: query
          name: size
          schema:
            default: false
            type: boolean
        - description: >
            Filters to process on the container list, encoded as JSON (a
            `map[string][]string`). For example, `{"status": ["paused"]}` will
            only return paused containers.


            Available filters:

            - `exited=<int>` containers with exit code of `<int>`

            -
            `status=`(`created`|`restarting`|`running`|`removing`|`paused`|`exited`|`dead`)

            - `label=key` or `label="key=value"` of a container label

            - `isolation=`(`default`|`process`|`hyperv`) (Windows daemon only)

            - `id=<ID>` a container's ID

            - `name=<name>` a container's name

            - `is-task=`(`true`|`false`)

            - `ancestor`=(`<image-name>[:<tag>]`, `<image id>`, or
            `<image@digest>`)

            - `before`=(`<container id>` or `<container name>`)

            - `since`=(`<container id>` or `<container name>`)

            - `volume`=(`<volume name>` or `<mount point destination>`)

            - `network`=(`<network id>` or `<network name>`)

            - `health`=(`starting`|`healthy`|`unhealthy`|`none`)
          in: query
          name: filters
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    - Command: echo 1
                      Created: 1367854155
                      HostConfig:
                        NetworkMode: default
                      Id: 8dfafdbc3a40
                      Image: 'ubuntu:latest'
                      ImageID: >-
                        d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82
                      Labels:
                        com.example.license: GPL
                        com.example.vendor: Acme
                        com.example.version: '1.0'
                      Mounts:
                        - Destination: /data
                          Driver: local
                          Mode: 'ro,Z'
                          Name: fac362...80535
                          Propagation: ''
                          RW: false
                          Source: /data
                      Names:
                        - /boring_feynman
                      NetworkSettings:
                        Networks:
                          bridge:
                            EndpointID: >-
                              2cdc4edb1ded3631c81f57966563e5c8525b81121bb3706a9a9a3ae102711f3f
                            Gateway: 172.17.0.1
                            GlobalIPv6Address: ''
                            GlobalIPv6PrefixLen: 0
                            IPAddress: 172.17.0.2
                            IPPrefixLen: 16
                            IPv6Gateway: ''
                            MacAddress: '02:42:ac:11:00:02'
                            NetworkID: >-
                              7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812
                      Ports:
                        - PrivatePort: 2222
                          PublicPort: 3333
                          Type: tcp
                      SizeRootFs: 0
                      SizeRw: 12288
                      State: Exited
                      Status: Exit 0
                    - Command: echo 222222
                      Created: 1367854155
                      HostConfig:
                        NetworkMode: default
                      Id: 9cd87474be90
                      Image: 'ubuntu:latest'
                      ImageID: >-
                        d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82
                      Labels: {}
                      Mounts: []
                      Names:
                        - /coolName
                      NetworkSettings:
                        Networks:
                          bridge:
                            EndpointID: >-
                              88eaed7b37b38c2a3f0c4bc796494fdf51b270c2d22656412a2ca5d559a64d7a
                            Gateway: 172.17.0.1
                            GlobalIPv6Address: ''
                            GlobalIPv6PrefixLen: 0
                            IPAddress: 172.17.0.8
                            IPPrefixLen: 16
                            IPv6Gateway: ''
                            MacAddress: '02:42:ac:11:00:08'
                            NetworkID: >-
                              7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812
                      Ports: []
                      SizeRootFs: 0
                      SizeRw: 12288
                      State: Exited
                      Status: Exit 0
                    - Command: echo 3333333333333333
                      Created: 1367854154
                      HostConfig:
                        NetworkMode: default
                      Id: 3176a2479c92
                      Image: 'ubuntu:latest'
                      ImageID: >-
                        d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82
                      Labels: {}
                      Mounts: []
                      Names:
                        - /sleepy_dog
                      NetworkSettings:
                        Networks:
                          bridge:
                            EndpointID: >-
                              8b27c041c30326d59cd6e6f510d4f8d1d570a228466f956edf7815508f78e30d
                            Gateway: 172.17.0.1
                            GlobalIPv6Address: ''
                            GlobalIPv6PrefixLen: 0
                            IPAddress: 172.17.0.6
                            IPPrefixLen: 16
                            IPv6Gateway: ''
                            MacAddress: '02:42:ac:11:00:06'
                            NetworkID: >-
                              7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812
                      Ports: []
                      SizeRootFs: 0
                      SizeRw: 12288
                      State: Exited
                      Status: Exit 0
                    - Command: echo 444444444444444444444444444444444
                      Created: 1367854152
                      HostConfig:
                        NetworkMode: default
                      Id: 4cb07b47f9fb
                      Image: 'ubuntu:latest'
                      ImageID: >-
                        d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82
                      Labels: {}
                      Mounts: []
                      Names:
                        - /running_cat
                      NetworkSettings:
                        Networks:
                          bridge:
                            EndpointID: >-
                              d91c7b2f0644403d7ef3095985ea0e2370325cd2332ff3a3225c4247328e66e9
                            Gateway: 172.17.0.1
                            GlobalIPv6Address: ''
                            GlobalIPv6PrefixLen: 0
                            IPAddress: 172.17.0.5
                            IPPrefixLen: 16
                            IPv6Gateway: ''
                            MacAddress: '02:42:ac:11:00:05'
                            NetworkID: >-
                              7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812
                      Ports: []
                      SizeRootFs: 0
                      SizeRw: 12288
                      State: Exited
                      Status: Exit 0
              schema:
                $ref: '#/components/schemas/ContainerSummary'
            text/plain:
              schema:
                $ref: '#/components/schemas/ContainerSummary'
          description: no error
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: bad parameter
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      tags:
        - Container
      operationId: ContainerList
      summary: List containers
  /containers/prune:
    post:
      parameters:
        - description: >
            Filters to process on the prune list, encoded as JSON (a
            `map[string][]string`).


            Available filters:
          in: query
          name: filters
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  ContainersDeleted:
                    description: Container IDs that were deleted
                    items:
                      type: string
                    type: array
                  SpaceReclaimed:
                    description: Disk space reclaimed in bytes
                    format: int64
                    type: integer
                type: object
            text/plain:
              schema:
                properties:
                  ContainersDeleted:
                    description: Container IDs that were deleted
                    items:
                      type: string
                    type: array
                  SpaceReclaimed:
                    description: Disk space reclaimed in bytes
                    format: int64
                    type: integer
                type: object
          description: No error
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      tags:
        - Container
      operationId: ContainerPrune
      summary: Delete stopped containers
  '/containers/{id}':
    delete:
      parameters:
        - description: ID or name of the container
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: Remove the volumes associated with the container.
          in: query
          name: v
          schema:
            default: false
            type: boolean
        - description: 'If the container is running, kill it before removing it.'
          in: query
          name: force
          schema:
            default: false
            type: boolean
      responses:
        '204':
          description: no error
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: bad parameter
        '404':
          content:
            application/json:
              examples:
                response:
                  value:
                    message: 'No such container: c2ada9df5af8'
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: no such container
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      tags:
        - Container
      operationId: ContainerDelete
      summary: Remove a container
  '/containers/{id}/archive':
    get:
      parameters:
        - description: ID or name of the container
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: Resource in the container’s filesystem to archive.
          in: query
          name: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: no error
        '400':
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                  - properties:
                      message:
                        description: >-
                          The error message. Either "must specify path
                          parameter" (path cannot be empty) or "not a directory"
                          (path was asserted to be a directory but exists as a
                          file).
                        nullable: false
                        type: string
                    type: object
            application/x-tar:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                  - properties:
                      message:
                        description: >-
                          The error message. Either "must specify path
                          parameter" (path cannot be empty) or "not a directory"
                          (path was asserted to be a directory but exists as a
                          file).
                        nullable: false
                        type: string
                    type: object
            text/plain:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                  - properties:
                      message:
                        description: >-
                          The error message. Either "must specify path
                          parameter" (path cannot be empty) or "not a directory"
                          (path was asserted to be a directory but exists as a
                          file).
                        nullable: false
                        type: string
                    type: object
          description: Bad parameter
        '404':
          content:
            application/json:
              examples:
                response:
                  value:
                    message: 'No such container: c2ada9df5af8'
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/x-tar:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Container or path does not exist
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/x-tar:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      tags:
        - Container
      description: Get an tar archive of a resource in the filesystem of container id.
      operationId: ContainerGetArchive
      summary: Get an archive of a filesystem resource in a container
    head:
      parameters:
        - description: ID or name of the container
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: Resource in the container’s filesystem to archive.
          in: query
          name: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: no error
          headers:
            X-Docker-Container-Path-Stat:
              description: TODO
              schema:
                type: string
        '400':
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                  - properties:
                      message:
                        description: >-
                          The error message. Either "must specify path
                          parameter" (path cannot be empty) or "not a directory"
                          (path was asserted to be a directory but exists as a
                          file).
                        nullable: false
                        type: string
                    type: object
            text/plain:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                  - properties:
                      message:
                        description: >-
                          The error message. Either "must specify path
                          parameter" (path cannot be empty) or "not a directory"
                          (path was asserted to be a directory but exists as a
                          file).
                        nullable: false
                        type: string
                    type: object
          description: Bad parameter
        '404':
          content:
            application/json:
              examples:
                response:
                  value:
                    message: 'No such container: c2ada9df5af8'
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Container or path does not exist
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      tags:
        - Container
      description: >-
        A response header `X-Docker-Container-Path-Stat` is return containing a
        base64 - encoded JSON object with some filesystem header information
        about the path.
      operationId: ContainerArchiveHead
      summary: Get information about files in a container
    put:
      parameters:
        - description: ID or name of the container
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: >-
            Path to a directory in the container to extract the archive’s
            contents into. 
          in: query
          name: path
          required: true
          schema:
            type: string
        - description: >-
            If “1”, “true”, or “True” then it will be an error if unpacking the
            given content would cause an existing directory to be replaced with
            a non-directory and vice versa.
          in: query
          name: noOverwriteDirNonDir
          schema:
            type: string
      responses:
        '200':
          description: The content was extracted successfully
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad parameter
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: >-
            Permission denied, the volume or container rootfs is marked as
            read-only.
        '404':
          content:
            application/json:
              examples:
                response:
                  value:
                    message: 'No such container: c2ada9df5af8'
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: No such container or path does not exist inside the container
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      tags:
        - Container
      description: >-
        Upload a tar archive to be extracted to a path in the filesystem of
        container id.
      operationId: ContainerPutArchive
      requestBody:
        content:
          application/json:
            schema:
              type: string
          application/octet-stream:
            schema:
              type: string
          application/x-tar:
            schema:
              type: string
          text/plain:
            schema:
              type: string
        description: >-
          The input stream must be a tar archive compressed with one of the
          following algorithms: identity (no compression), gzip, bzip2, xz.
        required: true
      summary: Extract an archive of files or folders to a directory in a container
  '/containers/{id}/attach':
    post:
      parameters:
        - description: ID or name of the container
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: >-
            Override the key sequence for detaching a container.Format is a
            single character `[a-Z]` or `ctrl-<value>` where `<value>` is one
            of: `a-z`, `@`, `^`, `[`, `,` or `_`.
          in: query
          name: detachKeys
          schema:
            type: string
        - description: >
            Replay previous logs from the container.


            This is useful for attaching to a container that has started and you
            want to output everything since the container started.


            If `stream` is also enabled, once all the previous output has been
            returned, it will seamlessly transition into streaming current
            output.
          in: query
          name: logs
          schema:
            default: false
            type: boolean
        - description: >-
            Stream attached streams from the the time the request was made
            onwards
          in: query
          name: stream
          schema:
            default: false
            type: boolean
        - description: Attach to `stdin`
          in: query
          name: stdin
          schema:
            default: false
            type: boolean
        - description: Attach to `stdout`
          in: query
          name: stdout
          schema:
            default: false
            type: boolean
        - description: Attach to `stderr`
          in: query
          name: stderr
          schema:
            default: false
            type: boolean
      responses:
        '101':
          description: 'no error, hints proxy about hijacking'
        '200':
          description: 'no error, no upgrade header found'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/vnd.docker.raw-stream:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: bad parameter
        '404':
          content:
            application/json:
              examples:
                response:
                  value:
                    message: 'No such container: c2ada9df5af8'
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/vnd.docker.raw-stream:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: no such container
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/vnd.docker.raw-stream:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      tags:
        - Container
      description: >
        Attach to a container to read its output or send it input. You can
        attach to the same container multiple times and you can reattach to
        containers that have been detached.


        Either the `stream` or `logs` parameter must be `true` for this endpoint
        to do anything.


        See [the documentation for the `docker attach`
        command](https://docs.docker.com/engine/reference/commandline/attach/)
        for more details.


        ### Hijacking


        This endpoint hijacks the HTTP connection to transport `stdin`,
        `stdout`, and `stderr` on the same socket.


        This is the response from the daemon for an attach request:


        ```

        HTTP/1.1 200 OK

        Content-Type: application/vnd.docker.raw-stream


        [STREAM]

        ```


        After the headers and two new lines, the TCP connection can now be used
        for raw, bidirectional communication between the client and server.


        To hint potential proxies about connection hijacking, the Docker client
        can also optionally send connection upgrade headers.


        For example, the client sends this request to upgrade the connection:


        ```

        POST /containers/16253994b7c4/attach?stream=1&stdout=1 HTTP/1.1

        Upgrade: tcp

        Connection: Upgrade

        ```


        The Docker daemon will respond with a `101 UPGRADED` response, and will
        similarly follow with the raw stream:


        ```

        HTTP/1.1 101 UPGRADED

        Content-Type: application/vnd.docker.raw-stream

        Connection: Upgrade

        Upgrade: tcp


        [STREAM]

        ```


        ### Stream format


        When the TTY setting is disabled in [`POST
        /containers/create`](#operation/ContainerCreate), the stream over the
        hijacked connected is multiplexed to separate out `stdout` and `stderr`.
        The stream consists of a series of frames, each containing a header and
        a payload.


        The header contains the information which the stream writes (`stdout` or
        `stderr`). It also contains the size of the associated frame encoded in
        the last four bytes (`uint32`).


        It is encoded on the first eight bytes like this:


        ```go

        header := [8]byte{STREAM_TYPE, 0, 0, 0, SIZE1, SIZE2, SIZE3, SIZE4}

        ```


        `STREAM_TYPE` can be:


        - 0: `stdin` (is written on `stdout`)

        - 1: `stdout`

        - 2: `stderr`


        `SIZE1, SIZE2, SIZE3, SIZE4` are the four bytes of the `uint32` size
        encoded as big endian.


        Following the header is the payload, which is the specified number of
        bytes of `STREAM_TYPE`.


        The simplest way to implement this protocol is the following:


        1. Read 8 bytes.

        2. Choose `stdout` or `stderr` depending on the first byte.

        3. Extract the frame size from the last four bytes.

        4. Read the extracted size and output it on the correct output.

        5. Goto 1.


        ### Stream format when using a TTY


        When the TTY setting is enabled in [`POST
        /containers/create`](#operation/ContainerCreate), the stream is not
        multiplexed. The data exchanged over the hijacked connection is simply
        the raw data from the process PTY and client's `stdin`.
      operationId: ContainerAttach
      summary: Attach to a container
  '/containers/{id}/attach/ws':
    get:
      parameters:
        - description: ID or name of the container
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: >-
            Override the key sequence for detaching a container.Format is a
            single character `[a-Z]` or `ctrl-<value>` where `<value>` is one
            of: `a-z`, `@`, `^`, `[`, `,`, or `_`.
          in: query
          name: detachKeys
          schema:
            type: string
        - description: Return logs
          in: query
          name: logs
          schema:
            default: false
            type: boolean
        - description: Return stream
          in: query
          name: stream
          schema:
            default: false
            type: boolean
        - description: Attach to `stdin`
          in: query
          name: stdin
          schema:
            default: false
            type: boolean
        - description: Attach to `stdout`
          in: query
          name: stdout
          schema:
            default: false
            type: boolean
        - description: Attach to `stderr`
          in: query
          name: stderr
          schema:
            default: false
            type: boolean
      responses:
        '101':
          description: 'no error, hints proxy about hijacking'
        '200':
          description: 'no error, no upgrade header found'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: bad parameter
        '404':
          content:
            application/json:
              examples:
                response:
                  value:
                    message: 'No such container: c2ada9df5af8'
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: no such container
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      tags:
        - Container
      operationId: ContainerAttachWebsocket
      summary: Attach to a container via a websocket
  '/containers/{id}/changes':
    get:
      parameters:
        - description: ID or name of the container
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    - Kind: 0
                      Path: /dev
                    - Kind: 1
                      Path: /dev/kmsg
                    - Kind: 1
                      Path: /test
              schema:
                items:
                  properties:
                    Kind:
                      description: Kind of change
                      enum:
                        - 0
                        - 1
                        - 2
                      type: integer
                    Path:
                      description: Path to file that has changed
                      type: string
                  type: object
                type: array
            text/plain:
              schema:
                items:
                  properties:
                    Kind:
                      description: Kind of change
                      enum:
                        - 0
                        - 1
                        - 2
                      type: integer
                    Path:
                      description: Path to file that has changed
                      type: string
                  type: object
                type: array
          description: no error
        '404':
          content:
            application/json:
              examples:
                response:
                  value:
                    message: 'No such container: c2ada9df5af8'
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: no such container
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      tags:
        - Container
      description: >
        Returns which files in a container's filesystem have been added,
        deleted, or modified. The `Kind` of modification can be one of:


        - `0`: Modified

        - `1`: Added

        - `2`: Deleted
      operationId: ContainerChanges
      summary: Get changes on a container’s filesystem
  '/containers/{id}/exec':
    post:
      parameters:
        - description: ID or name of container
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/IdResponse'
          description: no error
        '404':
          content:
            application/json:
              examples:
                response:
                  value:
                    message: 'No such container: c2ada9df5af8'
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: no such container
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: container is paused
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      tags:
        - Exec
      description: Run a command inside a running container.
      operationId: ContainerExec
      requestBody:
        content:
          application/json:
            schema:
              example:
                AttachStderr: true
                AttachStdin: false
                AttachStdout: true
                Cmd:
                  - date
                DetachKeys: 'ctrl-p,ctrl-q'
                Env:
                  - FOO=bar
                  - BAZ=quux
                Tty: false
              properties:
                AttachStderr:
                  description: Attach to `stderr` of the exec command.
                  type: boolean
                AttachStdin:
                  description: Attach to `stdin` of the exec command.
                  type: boolean
                AttachStdout:
                  description: Attach to `stdout` of the exec command.
                  type: boolean
                Cmd:
                  description: 'Command to run, as a string or array of strings.'
                  items:
                    type: string
                  type: array
                DetachKeys:
                  description: >-
                    Override the key sequence for detaching a container. Format
                    is a single character `[a-Z]` or `ctrl-<value>` where
                    `<value>` is one of: `a-z`, `@`, `^`, `[`, `,` or `_`.
                  type: string
                Env:
                  description: >-
                    A list of environment variables in the form `["VAR=value",
                    ...]`.
                  items:
                    type: string
                  type: array
                Privileged:
                  default: false
                  description: Runs the exec process with extended privileges.
                  type: boolean
                Tty:
                  description: Allocate a pseudo-TTY.
                  type: boolean
                User:
                  description: >-
                    The user, and optionally, group to run the exec process
                    inside the container. Format is one of: `user`,
                    `user:group`, `uid`, or `uid:gid`.
                  type: string
              type: object
          text/plain:
            schema:
              example:
                AttachStderr: true
                AttachStdin: false
                AttachStdout: true
                Cmd:
                  - date
                DetachKeys: 'ctrl-p,ctrl-q'
                Env:
                  - FOO=bar
                  - BAZ=quux
                Tty: false
              properties:
                AttachStderr:
                  description: Attach to `stderr` of the exec command.
                  type: boolean
                AttachStdin:
                  description: Attach to `stdin` of the exec command.
                  type: boolean
                AttachStdout:
                  description: Attach to `stdout` of the exec command.
                  type: boolean
                Cmd:
                  description: 'Command to run, as a string or array of strings.'
                  items:
                    type: string
                  type: array
                DetachKeys:
                  description: >-
                    Override the key sequence for detaching a container. Format
                    is a single character `[a-Z]` or `ctrl-<value>` where
                    `<value>` is one of: `a-z`, `@`, `^`, `[`, `,` or `_`.
                  type: string
                Env:
                  description: >-
                    A list of environment variables in the form `["VAR=value",
                    ...]`.
                  items:
                    type: string
                  type: array
                Privileged:
                  default: false
                  description: Runs the exec process with extended privileges.
                  type: boolean
                Tty:
                  description: Allocate a pseudo-TTY.
                  type: boolean
                User:
                  description: >-
                    The user, and optionally, group to run the exec process
                    inside the container. Format is one of: `user`,
                    `user:group`, `uid`, or `uid:gid`.
                  type: string
              type: object
        description: Exec configuration
        required: true
      summary: Create an exec instance
  '/containers/{id}/export':
    get:
      parameters:
        - description: ID or name of the container
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: no error
        '404':
          content:
            application/json:
              examples:
                response:
                  value:
                    message: 'No such container: c2ada9df5af8'
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: no such container
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      tags:
        - Container
      description: Export the contents of a container as a tarball.
      operationId: ContainerExport
      summary: Export a container
  '/containers/{id}/json':
    get:
      parameters:
        - description: ID or name of the container
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: Return the size of container as fields `SizeRw` and `SizeRootFs`
          in: query
          name: size
          schema:
            default: false
            type: boolean
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    AppArmorProfile: ''
                    Args:
                      - '-c'
                      - exit 9
                    Config:
                      AttachStderr: true
                      AttachStdin: false
                      AttachStdout: true
                      Cmd:
                        - /bin/sh
                        - '-c'
                        - exit 9
                      Domainname: ''
                      Env:
                        - >-
                          PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
                      Hostname: ba033ac44011
                      Image: ubuntu
                      Labels:
                        com.example.license: GPL
                        com.example.vendor: Acme
                        com.example.version: '1.0'
                      MacAddress: ''
                      NetworkDisabled: false
                      OpenStdin: false
                      StdinOnce: false
                      StopSignal: SIGTERM
                      StopTimeout: 10
                      Tty: false
                      User: ''
                      Volumes:
                        /volumes/data: {}
                      WorkingDir: ''
                    Created: '2015-01-06T15:47:31.485331387Z'
                    Driver: devicemapper
                    HostConfig:
                      BlkioDeviceReadBps:
                        - {}
                      BlkioDeviceReadIOps:
                        - {}
                      BlkioDeviceWriteBps:
                        - {}
                      BlkioDeviceWriteIOps:
                        - {}
                      BlkioWeight: 0
                      BlkioWeightDevice:
                        - {}
                      ContainerIDFile: ''
                      CpuPercent: 80
                      CpuPeriod: 100000
                      CpuRealtimePeriod: 1000000
                      CpuRealtimeRuntime: 10000
                      CpuShares: 0
                      CpusetCpus: ''
                      CpusetMems: ''
                      Devices: []
                      IpcMode: ''
                      KernelMemory: 0
                      LogConfig:
                        Type: json-file
                      LxcConf: []
                      MaximumIOBps: 0
                      MaximumIOps: 0
                      Memory: 0
                      MemoryReservation: 0
                      MemorySwap: 0
                      NetworkMode: bridge
                      OomKillDisable: false
                      OomScoreAdj: 500
                      PidMode: ''
                      PortBindings: {}
                      Privileged: false
                      PublishAllPorts: false
                      ReadonlyRootfs: false
                      RestartPolicy:
                        MaximumRetryCount: 2
                        Name: on-failure
                      ShmSize: 67108864
                      Sysctls:
                        net.ipv4.ip_forward: '1'
                      Ulimits:
                        - {}
                      VolumeDriver: ''
                    HostnamePath: >-
                      /var/lib/docker/containers/ba033ac4401106a3b513bc9d639eee123ad78ca3616b921167cd74b20e25ed39/hostname
                    HostsPath: >-
                      /var/lib/docker/containers/ba033ac4401106a3b513bc9d639eee123ad78ca3616b921167cd74b20e25ed39/hosts
                    Id: >-
                      ba033ac4401106a3b513bc9d639eee123ad78ca3616b921167cd74b20e25ed39
                    Image: >-
                      04c5d3b7b0656168630d3ba35d8889bd0e9caafcaeb3004d2bfbc47e7c5d35d2
                    LogPath: >-
                      /var/lib/docker/containers/1eb5fabf5a03807136561b3c00adcd2992b535d624d5e18b6cdc6a6844d9767b/1eb5fabf5a03807136561b3c00adcd2992b535d624d5e18b6cdc6a6844d9767b-json.log
                    MountLabel: ''
                    Mounts:
                      - Destination: /data
                        Driver: local
                        Mode: 'ro,Z'
                        Name: fac362...80535
                        Propagation: ''
                        RW: false
                        Source: /data
                    Name: /boring_euclid
                    NetworkSettings:
                      Bridge: ''
                      EndpointID: ''
                      Gateway: ''
                      GlobalIPv6Address: ''
                      GlobalIPv6PrefixLen: 0
                      HairpinMode: false
                      IPAddress: ''
                      IPPrefixLen: 0
                      IPv6Gateway: ''
                      LinkLocalIPv6Address: ''
                      LinkLocalIPv6PrefixLen: 0
                      MacAddress: ''
                      Networks:
                        bridge:
                          EndpointID: >-
                            7587b82f0dada3656fda26588aee72630c6fab1536d36e394b2bfbcf898c971d
                          Gateway: 172.17.0.1
                          GlobalIPv6Address: ''
                          GlobalIPv6PrefixLen: 0
                          IPAddress: 172.17.0.2
                          IPPrefixLen: 16
                          IPv6Gateway: ''
                          MacAddress: '02:42:ac:12:00:02'
                          NetworkID: >-
                            7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812
                      SandboxID: ''
                      SandboxKey: ''
                    Path: /bin/sh
                    ProcessLabel: ''
                    ResolvConfPath: >-
                      /var/lib/docker/containers/ba033ac4401106a3b513bc9d639eee123ad78ca3616b921167cd74b20e25ed39/resolv.conf
                    RestartCount: 1
                    State:
                      Dead: false
                      Error: ''
                      ExitCode: 9
                      FinishedAt: '2015-01-06T15:47:32.080254511Z'
                      OOMKilled: false
                      Paused: false
                      Pid: 0
                      Restarting: false
                      Running: true
                      StartedAt: '2015-01-06T15:47:32.072697474Z'
                      Status: running
              schema:
                properties:
                  AppArmorProfile:
                    type: string
                  Args:
                    description: The arguments to the command being run
                    items:
                      type: string
                    type: array
                  Config:
                    $ref: '#/components/schemas/Config'
                  Created:
                    description: The time the container was created
                    type: string
                  Driver:
                    type: string
                  ExecIDs:
                    type: string
                  GraphDriver:
                    $ref: '#/components/schemas/GraphDriver'
                  HostConfig:
                    $ref: '#/components/schemas/HostConfig'
                  HostnamePath:
                    type: string
                  HostsPath:
                    type: string
                  Id:
                    description: The ID of the container
                    type: string
                  Image:
                    description: The container's image
                    type: string
                  LogPath:
                    type: string
                  MountLabel:
                    type: string
                  Mounts:
                    items:
                      $ref: '#/components/schemas/MountPoint'
                    type: array
                  Name:
                    type: string
                  NetworkSettings:
                    $ref: '#/components/schemas/NetworkConfig'
                  Node:
                    description: TODO
                    type: object
                  Path:
                    description: The path to the command being run
                    type: string
                  ProcessLabel:
                    type: string
                  ResolvConfPath:
                    type: string
                  RestartCount:
                    type: integer
                  SizeRootFs:
                    description: The total size of all the files in this container.
                    format: int64
                    type: integer
                  SizeRw:
                    description: >-
                      The size of files that have been created or changed by
                      this container.
                    format: int64
                    type: integer
                  State:
                    description: The state of the container.
                    properties:
                      Dead:
                        type: boolean
                      Error:
                        type: string
                      ExitCode:
                        description: The last exit code of this container
                        type: integer
                      FinishedAt:
                        description: The time when this container last exited.
                        type: string
                      OOMKilled:
                        description: >-
                          Whether this container has been killed because it ran
                          out of memory.
                        type: boolean
                      Paused:
                        description: Whether this container is paused.
                        type: boolean
                      Pid:
                        description: The process ID of this container
                        type: integer
                      Restarting:
                        description: Whether this container is restarting.
                        type: boolean
                      Running:
                        description: Whether this container is running.
                        type: boolean
                      StartedAt:
                        description: The time when this container was last started.
                        type: string
                      Status:
                        description: >-
                          The status of the container. For example, `running` or
                          `exited`.
                        type: string
                    type: object
                type: object
            text/plain:
              schema:
                properties:
                  AppArmorProfile:
                    type: string
                  Args:
                    description: The arguments to the command being run
                    items:
                      type: string
                    type: array
                  Config:
                    $ref: '#/components/schemas/Config'
                  Created:
                    description: The time the container was created
                    type: string
                  Driver:
                    type: string
                  ExecIDs:
                    type: string
                  GraphDriver:
                    $ref: '#/components/schemas/GraphDriver'
                  HostConfig:
                    $ref: '#/components/schemas/HostConfig'
                  HostnamePath:
                    type: string
                  HostsPath:
                    type: string
                  Id:
                    description: The ID of the container
                    type: string
                  Image:
                    description: The container's image
                    type: string
                  LogPath:
                    type: string
                  MountLabel:
                    type: string
                  Mounts:
                    items:
                      $ref: '#/components/schemas/MountPoint'
                    type: array
                  Name:
                    type: string
                  NetworkSettings:
                    $ref: '#/components/schemas/NetworkConfig'
                  Node:
                    description: TODO
                    type: object
                  Path:
                    description: The path to the command being run
                    type: string
                  ProcessLabel:
                    type: string
                  ResolvConfPath:
                    type: string
                  RestartCount:
                    type: integer
                  SizeRootFs:
                    description: The total size of all the files in this container.
                    format: int64
                    type: integer
                  SizeRw:
                    description: >-
                      The size of files that have been created or changed by
                      this container.
                    format: int64
                    type: integer
                  State:
                    description: The state of the container.
                    properties:
                      Dead:
                        type: boolean
                      Error:
                        type: string
                      ExitCode:
                        description: The last exit code of this container
                        type: integer
                      FinishedAt:
                        description: The time when this container last exited.
                        type: string
                      OOMKilled:
                        description: >-
                          Whether this container has been killed because it ran
                          out of memory.
                        type: boolean
                      Paused:
                        description: Whether this container is paused.
                        type: boolean
                      Pid:
                        description: The process ID of this container
                        type: integer
                      Restarting:
                        description: Whether this container is restarting.
                        type: boolean
                      Running:
                        description: Whether this container is running.
                        type: boolean
                      StartedAt:
                        description: The time when this container was last started.
                        type: string
                      Status:
                        description: >-
                          The status of the container. For example, `running` or
                          `exited`.
                        type: string
                    type: object
                type: object
          description: no error
        '404':
          content:
            application/json:
              examples:
                response:
                  value:
                    message: 'No such container: c2ada9df5af8'
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: no such container
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      tags:
        - Container
      description: Return low-level information about a container.
      operationId: ContainerInspect
      summary: Inspect a container
  '/containers/{id}/kill':
    post:
      parameters:
        - description: ID or name of the container
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: >-
            Signal to send to the container as an integer or string (e.g.
            `SIGINT`)
          in: query
          name: signal
          schema:
            default: SIGKILL
            type: string
      responses:
        '204':
          description: no error
        '404':
          content:
            application/json:
              examples:
                response:
                  value:
                    message: 'No such container: c2ada9df5af8'
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: no such container
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      tags:
        - Container
      description: >-
        Send a POSIX signal to a container, defaulting to killing to the
        container.
      operationId: ContainerKill
      summary: Kill a container
  '/containers/{id}/logs':
    get:
      parameters:
        - description: ID or name of the container
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: >
            Return the logs as a stream.


            This will return a `101` HTTP response with a `Connection: upgrade`
            header, then hijack the HTTP connection to send raw output. For more
            information about hijacking and the stream format, [see the
            documentation for the attach endpoint](#operation/ContainerAttach).
          in: query
          name: follow
          schema:
            default: false
            type: boolean
        - description: Return logs from `stdout`
          in: query
          name: stdout
          schema:
            default: false
            type: boolean
        - description: Return logs from `stderr`
          in: query
          name: stderr
          schema:
            default: false
            type: boolean
        - description: 'Only return logs since this time, as a UNIX timestamp'
          in: query
          name: since
          schema:
            default: 0
            type: integer
        - description: Add timestamps to every log line
          in: query
          name: timestamps
          schema:
            default: false
            type: boolean
        - description: >-
            Only return this number of log lines from the end of the logs.
            Specify as an integer or `all` to output all log lines.
          in: query
          name: tail
          schema:
            default: all
            type: string
      responses:
        '101':
          content:
            application/json:
              schema:
                format: binary
                type: string
            text/plain:
              schema:
                format: binary
                type: string
          description: logs returned as a stream
        '200':
          content:
            application/json:
              schema:
                type: string
            text/plain:
              schema:
                type: string
          description: logs returned as a string in response body
        '404':
          content:
            application/json:
              examples:
                response:
                  value:
                    message: 'No such container: c2ada9df5af8'
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: no such container
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      tags:
        - Container
      description: >
        Get `stdout` and `stderr` logs from a container.


        Note: This endpoint works only for containers with the `json-file` or
        `journald` logging driver.
      operationId: ContainerLogs
      summary: Get container logs
  '/containers/{id}/pause':
    post:
      parameters:
        - description: ID or name of the container
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: no error
        '404':
          content:
            application/json:
              examples:
                response:
                  value:
                    message: 'No such container: c2ada9df5af8'
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: no such container
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      tags:
        - Container
      description: >
        Use the cgroups freezer to suspend all processes in a container.


        Traditionally, when suspending a process the `SIGSTOP` signal is used,
        which is observable by the process being suspended. With the cgroups
        freezer the process is unaware, and unable to capture, that it is being
        suspended, and subsequently resumed.
      operationId: ContainerPause
      summary: Pause a container
  '/containers/{id}/rename':
    post:
      parameters:
        - description: ID or name of the container
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: New name for the container
          in: query
          name: name
          required: true
          schema:
            type: string
      responses:
        '204':
          description: no error
        '404':
          content:
            application/json:
              examples:
                response:
                  value:
                    message: 'No such container: c2ada9df5af8'
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: no such container
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: name already in use
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      tags:
        - Container
      operationId: ContainerRename
      summary: Rename a container
  '/containers/{id}/resize':
    post:
      parameters:
        - description: ID or name of the container
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: Height of the tty session in characters
          in: query
          name: h
          schema:
            type: integer
        - description: Width of the tty session in characters
          in: query
          name: w
          schema:
            type: integer
      responses:
        '200':
          description: no error
        '404':
          content:
            application/json:
              examples:
                response:
                  value:
                    message: 'No such container: c2ada9df5af8'
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: no such container
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: cannot resize container
      tags:
        - Container
      description: >-
        Resize the TTY for a container. You must restart the container for the
        resize to take effect.
      operationId: ContainerResize
      summary: Resize a container TTY
  '/containers/{id}/restart':
    post:
      parameters:
        - description: ID or name of the container
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: Number of seconds to wait before killing the container
          in: query
          name: t
          schema:
            type: integer
      responses:
        '204':
          description: no error
        '404':
          content:
            application/json:
              examples:
                response:
                  value:
                    message: 'No such container: c2ada9df5af8'
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: no such container
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      tags:
        - Container
      operationId: ContainerRestart
      summary: Restart a container
  '/containers/{id}/start':
    post:
      parameters:
        - description: ID or name of the container
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: >-
            Override the key sequence for detaching a container. Format is a
            single character `[a-Z]` or `ctrl-<value>` where `<value>` is one
            of: `a-z`, `@`, `^`, `[`, `,` or `_`.
          in: query
          name: detachKeys
          schema:
            type: string
      responses:
        '204':
          description: no error
        '304':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: container already started
        '404':
          content:
            application/json:
              examples:
                response:
                  value:
                    message: 'No such container: c2ada9df5af8'
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: no such container
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      tags:
        - Container
      operationId: ContainerStart
      summary: Start a container
  '/containers/{id}/stats':
    get:
      parameters:
        - description: ID or name of the container
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: >-
            Stream the output. If false, the stats will be output once and then
            it will disconnect.
          in: query
          name: stream
          schema:
            default: true
            type: boolean
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    blkio_stats: {}
                    cpu_stats:
                      cpu_usage:
                        percpu_usage:
                          - 8646879
                          - 24472255
                          - 36438778
                          - 30657443
                        total_usage: 100215355
                        usage_in_kernelmode: 30000000
                        usage_in_usermode: 50000000
                      system_cpu_usage: 739306590000000
                      throttling_data:
                        periods: 0
                        throttled_periods: 0
                        throttled_time: 0
                    memory_stats:
                      failcnt: 0
                      limit: 67108864
                      max_usage: 6651904
                      stats:
                        active_anon: 6537216
                        active_file: 0
                        cache: 0
                        hierarchical_memory_limit: 67108864
                        inactive_anon: 0
                        inactive_file: 0
                        mapped_file: 0
                        pgfault: 964
                        pgmajfault: 0
                        pgpgin: 477
                        pgpgout: 414
                        rss: 6537216
                        rss_huge: 6291456
                        total_active_anon: 6537216
                        total_active_file: 0
                        total_cache: 0
                        total_inactive_anon: 0
                        total_inactive_file: 0
                        total_mapped_file: 0
                        total_pgfault: 964
                        total_pgmajfault: 0
                        total_pgpgin: 477
                        total_pgpgout: 414
                        total_rss: 6537216
                        total_rss_huge: 6291456
                        total_unevictable: 0
                        total_writeback: 0
                        unevictable: 0
                        writeback: 0
                      usage: 6537216
                    networks:
                      eth0:
                        rx_bytes: 5338
                        rx_dropped: 0
                        rx_errors: 0
                        rx_packets: 36
                        tx_bytes: 648
                        tx_dropped: 0
                        tx_errors: 0
                        tx_packets: 8
                      eth5:
                        rx_bytes: 4641
                        rx_dropped: 0
                        rx_errors: 0
                        rx_packets: 26
                        tx_bytes: 690
                        tx_dropped: 0
                        tx_errors: 0
                        tx_packets: 9
                    pids_stats:
                      current: 3
                    precpu_stats:
                      cpu_usage:
                        percpu_usage:
                          - 8646879
                          - 24350896
                          - 36438778
                          - 30657443
                        total_usage: 100093996
                        usage_in_kernelmode: 30000000
                        usage_in_usermode: 50000000
                      system_cpu_usage: 9492140000000
                      throttling_data:
                        periods: 0
                        throttled_periods: 0
                        throttled_time: 0
                    read: '2015-01-08T22:57:31.547920715Z'
              schema:
                type: object
            text/plain:
              schema:
                type: object
          description: no error
        '404':
          content:
            application/json:
              examples:
                response:
                  value:
                    message: 'No such container: c2ada9df5af8'
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: no such container
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      tags:
        - Container
      description: >
        This endpoint returns a live stream of a container’s resource usage
        statistics.


        The `precpu_stats` is the CPU statistic of last read, which is used for
        calculating the CPU usage percentage. It is not the same as the
        `cpu_stats` field.
      operationId: ContainerStats
      summary: Get container stats based on resource usage
  '/containers/{id}/stop':
    post:
      parameters:
        - description: ID or name of the container
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: Number of seconds to wait before killing the container
          in: query
          name: t
          schema:
            type: integer
      responses:
        '204':
          description: no error
        '304':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: container already stopped
        '404':
          content:
            application/json:
              examples:
                response:
                  value:
                    message: 'No such container: c2ada9df5af8'
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: no such container
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      tags:
        - Container
      operationId: ContainerStop
      summary: Stop a container
  '/containers/{id}/top':
    get:
      parameters:
        - description: ID or name of the container
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: 'The arguments to pass to `ps`. For example, `aux`'
          in: query
          name: ps_args
          schema:
            default: '-ef'
            type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    Processes:
                      - - root
                        - '13642'
                        - '882'
                        - '0'
                        - '17:03'
                        - pts/0
                        - '00:00:00'
                        - /bin/bash
                      - - root
                        - '13735'
                        - '13642'
                        - '0'
                        - '17:06'
                        - pts/0
                        - '00:00:00'
                        - sleep 10
                    Titles:
                      - UID
                      - PID
                      - PPID
                      - C
                      - STIME
                      - TTY
                      - TIME
                      - CMD
              schema:
                properties:
                  Processes:
                    description: >-
                      Each process running in the container, where each is
                      process is an array of values corresponding to the titles
                    items:
                      items:
                        type: string
                      type: array
                    type: array
                  Titles:
                    description: The ps column titles
                    items:
                      type: string
                    type: array
                type: object
            text/plain:
              schema:
                properties:
                  Processes:
                    description: >-
                      Each process running in the container, where each is
                      process is an array of values corresponding to the titles
                    items:
                      items:
                        type: string
                      type: array
                    type: array
                  Titles:
                    description: The ps column titles
                    items:
                      type: string
                    type: array
                type: object
          description: no error
        '404':
          content:
            application/json:
              examples:
                response:
                  value:
                    message: 'No such container: c2ada9df5af8'
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: no such container
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      tags:
        - Container
      description: >-
        On Unix systems, this is done by running the `ps` command. This endpoint
        is not supported on Windows.
      operationId: ContainerTop
      summary: List processes running inside a container
  '/containers/{id}/unpause':
    post:
      parameters:
        - description: ID or name of the container
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: no error
        '404':
          content:
            application/json:
              examples:
                response:
                  value:
                    message: 'No such container: c2ada9df5af8'
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: no such container
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      tags:
        - Container
      description: Resume a container which has been paused.
      operationId: ContainerUnpause
      summary: Unpause a container
  '/containers/{id}/update':
    post:
      parameters:
        - description: ID or name of the container
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  Warnings:
                    items:
                      type: string
                    type: array
                type: object
            text/plain:
              schema:
                properties:
                  Warnings:
                    items:
                      type: string
                    type: array
                type: object
          description: The container has been updated.
        '404':
          content:
            application/json:
              examples:
                response:
                  value:
                    message: 'No such container: c2ada9df5af8'
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: no such container
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      tags:
        - Container
      description: >-
        Change various configuration options of a container without having to
        recreate it.
      operationId: ContainerUpdate
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Resources'
                - properties:
                    RestartPolicy:
                      $ref: '#/components/schemas/RestartPolicy'
                  type: object
              example:
                BlkioWeight: 300
                CpuPeriod: 100000
                CpuQuota: 50000
                CpuRealtimePeriod: 1000000
                CpuRealtimeRuntime: 10000
                CpuShares: 512
                CpusetCpus: '0,1'
                CpusetMems: '0'
                KernelMemory: 52428800
                Memory: 314572800
                MemoryReservation: 209715200
                MemorySwap: 514288000
                RestartPolicy:
                  MaximumRetryCount: 4
                  Name: on-failure
          text/plain:
            schema:
              allOf:
                - $ref: '#/components/schemas/Resources'
                - properties:
                    RestartPolicy:
                      $ref: '#/components/schemas/RestartPolicy'
                  type: object
              example:
                BlkioWeight: 300
                CpuPeriod: 100000
                CpuQuota: 50000
                CpuRealtimePeriod: 1000000
                CpuRealtimeRuntime: 10000
                CpuShares: 512
                CpusetCpus: '0,1'
                CpusetMems: '0'
                KernelMemory: 52428800
                Memory: 314572800
                MemoryReservation: 209715200
                MemorySwap: 514288000
                RestartPolicy:
                  MaximumRetryCount: 4
                  Name: on-failure
        required: true
      summary: Update a container
  '/containers/{id}/wait':
    post:
      parameters:
        - description: ID or name of the container
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  StatusCode:
                    description: Exit code of the container
                    nullable: false
                    type: integer
                required:
                  - StatusCode
                type: object
            text/plain:
              schema:
                properties:
                  StatusCode:
                    description: Exit code of the container
                    nullable: false
                    type: integer
                required:
                  - StatusCode
                type: object
          description: The container has exit.
        '404':
          content:
            application/json:
              examples:
                response:
                  value:
                    message: 'No such container: c2ada9df5af8'
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: no such container
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      tags:
        - Container
      description: 'Block until a container stops, then returns the exit code.'
      operationId: ContainerWait
      summary: Wait for a container
  /events:
    get:
      parameters:
        - description: Show events created since this timestamp then stream new events.
          in: query
          name: since
          schema:
            type: string
        - description: Show events created until this timestamp then stop streaming.
          in: query
          name: until
          schema:
            type: string
        - description: >
            A JSON encoded value of filters (a `map[string][]string`) to process
            on the event list. Available filters:


            - `container=<string>` container name or ID

            - `event=<string>` event type

            - `image=<string>` image name or ID

            - `label=<string>` image or container label

            - `type=<string>` object to filter by, one of `container`, `image`,
            `volume`, `network`, or `daemon`

            - `volume=<string>` volume name or ID

            - `network=<string>` network name or ID

            - `daemon=<string>` daemon name or ID
          in: query
          name: filters
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    Action: create
                    Actor:
                      Attributes:
                        com.example.some-label: some-label-value
                        image: alpine
                        name: my-container
                      ID: >-
                        ede54ee1afda366ab42f824e8a5ffd195155d853ceaec74a927f249ea270c743
                    Type: container
                    time: 1461943101
              schema:
                properties:
                  Action:
                    description: The type of event
                    type: string
                  Actor:
                    properties:
                      Attributes:
                        additionalProperties:
                          type: string
                        description: >-
                          Various key/value attributes of the object, depending
                          on its type
                        type: object
                      ID:
                        description: The ID of the object emitting the event
                        type: string
                    type: object
                  Type:
                    description: The type of object emitting the event
                    type: string
                  time:
                    description: Timestamp of event
                    type: integer
                  timeNano:
                    description: 'Timestamp of event, with nanosecond accuracy'
                    format: int64
                    type: integer
                type: object
            text/plain:
              schema:
                properties:
                  Action:
                    description: The type of event
                    type: string
                  Actor:
                    properties:
                      Attributes:
                        additionalProperties:
                          type: string
                        description: >-
                          Various key/value attributes of the object, depending
                          on its type
                        type: object
                      ID:
                        description: The ID of the object emitting the event
                        type: string
                    type: object
                  Type:
                    description: The type of object emitting the event
                    type: string
                  time:
                    description: Timestamp of event
                    type: integer
                  timeNano:
                    description: 'Timestamp of event, with nanosecond accuracy'
                    format: int64
                    type: integer
                type: object
          description: no error
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      tags:
        - System
      description: >
        Stream real-time events from the server.


        Various objects within Docker report events when something happens to
        them.


        Containers report these events: `attach, commit, copy, create, destroy,
        detach, die, exec_create, exec_detach, exec_start, export, kill, oom,
        pause, rename, resize, restart, start, stop, top, unpause, update`


        Images report these events: `delete, import, load, pull, push, save,
        tag, untag`


        Volumes report these events: `create, mount, unmount, destroy`


        Networks report these events: `create, connect, disconnect, destroy`


        The Docker daemon reports these events: `reload`
      operationId: SystemEvents
      summary: Monitor events
  '/exec/{id}/json':
    get:
      parameters:
        - description: Exec instance ID
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    CanRemove: false
                    ContainerID: >-
                      b53ee82b53a40c7dca428523e34f741f3abc51d9f297a14ff874bf761b995126
                    DetachKeys: ''
                    ExitCode: 2
                    ID: >-
                      f33bbfb39f5b142420f4759b2348913bd4a8d1a6d7fd56499cb41a1bb91d7b3b
                    OpenStderr: true
                    OpenStdin: true
                    OpenStdout: true
                    Pid: 42000
                    ProcessConfig:
                      arguments:
                        - '-c'
                        - exit 2
                      entrypoint: sh
                      privileged: false
                      tty: true
                      user: '1000'
                    Running: false
              schema:
                properties:
                  ContainerID:
                    type: string
                  ExitCode:
                    type: integer
                  ID:
                    type: string
                  OpenStderr:
                    type: boolean
                  OpenStdin:
                    type: boolean
                  OpenStdout:
                    type: boolean
                  Pid:
                    description: The system process ID for the exec process.
                    type: integer
                  ProcessConfig:
                    $ref: '#/components/schemas/ProcessConfig'
                  Running:
                    type: boolean
                type: object
            text/plain:
              schema:
                properties:
                  ContainerID:
                    type: string
                  ExitCode:
                    type: integer
                  ID:
                    type: string
                  OpenStderr:
                    type: boolean
                  OpenStdin:
                    type: boolean
                  OpenStdout:
                    type: boolean
                  Pid:
                    description: The system process ID for the exec process.
                    type: integer
                  ProcessConfig:
                    $ref: '#/components/schemas/ProcessConfig'
                  Running:
                    type: boolean
                type: object
          description: No error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: No such exec instance
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      tags:
        - Exec
      description: Return low-level information about an exec instance.
      operationId: ExecInspect
      summary: Inspect an exec instance
  '/exec/{id}/resize':
    post:
      parameters:
        - description: Exec instance ID
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: Height of the TTY session in characters
          in: query
          name: h
          schema:
            type: integer
        - description: Width of the TTY session in characters
          in: query
          name: w
          schema:
            type: integer
      responses:
        '201':
          description: No error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: No such exec instance
      tags:
        - Exec
      description: >-
        Resize the TTY session used by an exec instance. This endpoint only
        works if `tty` was specified as part of creating and starting the exec
        instance.
      operationId: ExecResize
      summary: Resize an exec instance
  '/exec/{id}/start':
    post:
      parameters:
        - description: Exec instance ID
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: No error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/vnd.docker.raw-stream:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: No such exec instance
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/vnd.docker.raw-stream:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Container is stopped or paused
      tags:
        - Exec
      description: >-
        Starts a previously set up exec instance. If detach is true, this
        endpoint returns immediately after starting the command. Otherwise, it
        sets up an interactive session with the command.
      operationId: ExecStart
      requestBody:
        content:
          application/json:
            schema:
              example:
                Detach: false
                Tty: false
              properties:
                Detach:
                  description: Detach from the command.
                  type: boolean
                Tty:
                  description: Allocate a pseudo-TTY.
                  type: boolean
              type: object
          text/plain:
            schema:
              example:
                Detach: false
                Tty: false
              properties:
                Detach:
                  description: Detach from the command.
                  type: boolean
                Tty:
                  description: Allocate a pseudo-TTY.
                  type: boolean
              type: object
      summary: Start an exec instance
  /images/create:
    post:
      parameters:
        - description: >-
            Name of the image to pull. The name may include a tag or digest.
            This parameter may only be used when pulling an image. The pull is
            cancelled if the HTTP connection is closed.
          in: query
          name: fromImage
          schema:
            type: string
        - description: >-
            Source to import. The value may be a URL from which the image can be
            retrieved or `-` to read the image from the request body. This
            parameter may only be used when importing an image.
          in: query
          name: fromSrc
          schema:
            type: string
        - description: >-
            Repository name given to an image when it is imported. The repo may
            include a tag. This parameter may only be used when importing an
            image.
          in: query
          name: repo
          schema:
            type: string
        - description: >-
            Tag or digest. If empty when pulling an image, this causes all tags
            for the given image to be pulled.
          in: query
          name: tag
          schema:
            type: string
        - description: >-
            A base64-encoded auth configuration. [See the authentication section
            for details.](#section/Authentication)
          in: header
          name: X-Registry-Auth
          schema:
            type: string
      responses:
        '200':
          description: no error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: repository does not exist or no read access
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      tags:
        - Image
      description: Create an image by either pulling it from a registry or importing it.
      operationId: ImageCreate
      requestBody:
        content:
          application/json:
            schema:
              type: string
          application/octet-stream:
            schema:
              type: string
          text/plain:
            schema:
              type: string
        description: >-
          Image content if the value `-` has been specified in fromSrc query
          parameter
      summary: Create an image
  /images/get:
    get:
      parameters:
        - description: Image names to filter by
          in: query
          name: names
          schema:
            items:
              type: string
            type: array
      responses:
        '200':
          content:
            application/json:
              schema:
                format: binary
                type: string
            application/x-tar:
              schema:
                format: binary
                type: string
            text/plain:
              schema:
                format: binary
                type: string
          description: no error
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/x-tar:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      tags:
        - Image
      description: >
        Get a tarball containing all images and metadata for several image
        repositories.


        For each value of the `names` parameter: if it is a specific name and
        tag (e.g. `ubuntu:latest`), then only that image (and its parents) are
        returned; if it is an image ID, similarly only that image (and its
        parents) are returned and there would be no names referenced in the
        'repositories' file for this image ID.


        For details on the format, see [the export image
        endpoint](#operation/ImageGet).
      operationId: ImageGetAll
      summary: Export several images
  /images/json:
    get:
      parameters:
        - description: >-
            Show all images. Only images from a final layer (no children) are
            shown by default.
          in: query
          name: all
          schema:
            default: false
            type: boolean
        - description: >
            A JSON encoded value of the filters (a `map[string][]string`) to
            process on the images list.


            Available filters:

            - `dangling=true`

            - `label=key` or `label="key=value"` of an image label

            - `before`=(`<image-name>[:<tag>]`,  `<image id>` or
            `<image@digest>`)

            - `since`=(`<image-name>[:<tag>]`,  `<image id>` or
            `<image@digest>`)

            - `reference`=(`<image-name>[:<tag>]`)
          in: query
          name: filters
          schema:
            type: string
        - description: Show digest information as a `RepoDigests` field on each image.
          in: query
          name: digests
          schema:
            default: false
            type: boolean
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    - Containers: 2
                      Created: 1474925151
                      Id: >-
                        sha256:e216a057b1cb1efc11f8a268f37ef62083e70b1b38323ba252e25ac88904a7e8
                      Labels: {}
                      ParentId: ''
                      RepoDigests:
                        - >-
                          ubuntu@sha256:992069aee4016783df6345315302fa59681aae51a8eeb2f889dea59290f21787
                      RepoTags:
                        - 'ubuntu:12.04'
                        - 'ubuntu:precise'
                      SharedSize: 0
                      Size: 103579269
                      VirtualSize: 103579269
                    - Containers: 5
                      Created: 1403128455
                      Id: >-
                        sha256:3e314f95dcace0f5e4fd37b10862fe8398e3c60ed36600bc0ca5fda78b087175
                      Labels: {}
                      ParentId: ''
                      RepoDigests:
                        - >-
                          ubuntu@sha256:002fba3e3255af10be97ea26e476692a7ebed0bb074a9ab960b2e7a1526b15d7
                        - >-
                          ubuntu@sha256:68ea0200f0b90df725d99d823905b04cf844f6039ef60c60bf3e019915017bd3
                      RepoTags:
                        - 'ubuntu:12.10'
                        - 'ubuntu:quantal'
                      SharedSize: 0
                      Size: 172064416
                      VirtualSize: 172064416
              schema:
                items:
                  $ref: '#/components/schemas/ImageSummary'
                type: array
            text/plain:
              schema:
                items:
                  $ref: '#/components/schemas/ImageSummary'
                type: array
          description: Summary image data for the images matching the query
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      tags:
        - Image
      description: >-
        Returns a list of images on the server. Note that it uses a different,
        smaller representation of an image than inspecting a single image.
      operationId: ImageList
      summary: List Images
  /images/load:
    post:
      parameters:
        - description: Suppress progress details during load.
          in: query
          name: quiet
          schema:
            default: false
            type: boolean
      responses:
        '200':
          description: no error
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      tags:
        - Image
      description: >
        Load a set of images and tags into a repository.


        For details on the format, see [the export image
        endpoint](#operation/ImageGet).
      operationId: ImageLoad
      requestBody:
        content:
          application/json:
            schema:
              format: binary
              type: string
          application/x-tar:
            schema:
              format: binary
              type: string
          text/plain:
            schema:
              format: binary
              type: string
        description: Tar archive containing images
      summary: Import images
  /images/prune:
    post:
      parameters:
        - description: >
            Filters to process on the prune list, encoded as JSON (a
            `map[string][]string`).


            Available filters:

            - `dangling=<boolean>` When set to `true` (or `1`), prune only
               unused *and* untagged images. When set to `false`
               (or `0`), all unused images are pruned.
          in: query
          name: filters
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  ImagesDeleted:
                    description: Images that were deleted
                    items:
                      $ref: '#/components/schemas/ImageDeleteResponse'
                    type: array
                  SpaceReclaimed:
                    description: Disk space reclaimed in bytes
                    format: int64
                    type: integer
                type: object
            text/plain:
              schema:
                properties:
                  ImagesDeleted:
                    description: Images that were deleted
                    items:
                      $ref: '#/components/schemas/ImageDeleteResponse'
                    type: array
                  SpaceReclaimed:
                    description: Disk space reclaimed in bytes
                    format: int64
                    type: integer
                type: object
          description: No error
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      tags:
        - Image
      operationId: ImagePrune
      summary: Delete unused images
  /images/search:
    get:
      parameters:
        - description: Term to search
          in: query
          name: term
          required: true
          schema:
            type: string
        - description: Maximum number of results to return
          in: query
          name: limit
          schema:
            type: integer
        - description: >
            A JSON encoded value of the filters (a `map[string][]string`) to
            process on the images list. Available filters:


            - `stars=<number>`

            - `is-automated=(true|false)`

            - `is-official=(true|false)`
          in: query
          name: filters
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    - description: ''
                      is_automated: false
                      is_official: false
                      name: wma55/u1210sshd
                      star_count: 0
                    - description: ''
                      is_automated: false
                      is_official: false
                      name: jdswinbank/sshd
                      star_count: 0
                    - description: ''
                      is_automated: false
                      is_official: false
                      name: vgauthier/sshd
                      star_count: 0
              schema:
                items:
                  properties:
                    description:
                      type: string
                    is_automated:
                      type: boolean
                    is_official:
                      type: boolean
                    name:
                      type: string
                    star_count:
                      type: integer
                  type: object
                type: array
            text/plain:
              schema:
                items:
                  properties:
                    description:
                      type: string
                    is_automated:
                      type: boolean
                    is_official:
                      type: boolean
                    name:
                      type: string
                    star_count:
                      type: integer
                  type: object
                type: array
          description: No error
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      tags:
        - Image
      description: Search for an image on Docker Hub.
      operationId: ImageSearch
      summary: Search images
  '/images/{name}':
    delete:
      parameters:
        - description: Image name or ID
          in: path
          name: name
          required: true
          schema:
            type: string
        - description: >-
            Remove the image even if it is being used by stopped containers or
            has other tags
          in: query
          name: force
          schema:
            default: false
            type: boolean
        - description: Do not delete untagged parent images
          in: query
          name: noprune
          schema:
            default: false
            type: boolean
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    - Untagged: 3e2f21a89f
                    - Deleted: 3e2f21a89f
                    - Deleted: 53b4f83ac9
              schema:
                items:
                  $ref: '#/components/schemas/ImageDeleteResponse'
                type: array
            text/plain:
              schema:
                items:
                  $ref: '#/components/schemas/ImageDeleteResponse'
                type: array
          description: No error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: No such image
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Conflict
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      tags:
        - Image
      description: >
        Remove an image, along with any untagged parent images that were
        referenced by that image.


        Images can't be removed if they have descendant images, are being used
        by a running container or are being used by a build.
      operationId: ImageDelete
      summary: Remove an image
  '/images/{name}/get':
    get:
      parameters:
        - description: Image name or ID
          in: path
          name: name
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                format: binary
                type: string
            application/x-tar:
              schema:
                format: binary
                type: string
            text/plain:
              schema:
                format: binary
                type: string
          description: no error
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/x-tar:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      tags:
        - Image
      description: >
        Get a tarball containing all images and metadata for a repository.


        If `name` is a specific name and tag (e.g. `ubuntu:latest`), then only
        that image (and its parents) are returned. If `name` is an image ID,
        similarly only that image (and its parents) are returned, but with the
        exclusion of the `repositories` file in the tarball, as there were no
        image names referenced.


        ### Image tarball format


        An image tarball contains one directory per image layer (named using its
        long ID), each containing these files:


        - `VERSION`: currently `1.0` - the file format version

        - `json`: detailed layer information, similar to `docker inspect
        layer_id`

        - `layer.tar`: A tarfile containing the filesystem changes in this layer


        The `layer.tar` file contains `aufs` style `.wh..wh.aufs` files and
        directories for storing attribute changes and deletions.


        If the tarball defines a repository, the tarball should also include a
        `repositories` file at the root that contains a list of repository and
        tag names mapped to layer IDs.


        ```json

        {
          "hello-world": {
            "latest": "565a9d68a73f6706862bfe8409a7f659776d4d60a8d096eb4a3cbce6999cc2a1"
          }
        }

        ```
      operationId: ImageGet
      summary: Export an image
  '/images/{name}/history':
    get:
      parameters:
        - description: Image name or ID
          in: path
          name: name
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    - Comment: ''
                      Created: 1398108230
                      CreatedBy: >-
                        /bin/sh -c #(nop) ADD
                        file:eb15dbd63394e063b805a3c32ca7bf0266ef64676d5a6fab4801f2e81e2a5148
                        in /
                      Id: >-
                        3db9c44f45209632d6050b35958829c3a2aa256d81b9a7be45b362ff85c54710
                      Size: 182964289
                      Tags:
                        - 'ubuntu:lucid'
                        - 'ubuntu:10.04'
                    - Comment: ''
                      Created: 1398108222
                      CreatedBy: >-
                        /bin/sh -c #(nop) MAINTAINER Tianon Gravi
                        <admwiggin@gmail.com> - mkimage-debootstrap.sh -i
                        iproute,iputils-ping,ubuntu-minimal -t lucid.tar.xz
                        lucid http://archive.ubuntu.com/ubuntu/
                      Id: >-
                        6cfa4d1f33fb861d4d114f43b25abd0ac737509268065cdfd69d544a59c85ab8
                      Size: 0
                      Tags: []
                    - Comment: Imported from -
                      Created: 1371157430
                      CreatedBy: ''
                      Id: >-
                        511136ea3c5a64f264b78b5433614aec563103b4d4702f3ba7d4d2698e22c158
                      Size: 0
                      Tags:
                        - 'scratch12:latest'
                        - 'scratch:latest'
              schema:
                items:
                  properties:
                    Comment:
                      type: string
                    Created:
                      format: int64
                      type: integer
                    CreatedBy:
                      type: string
                    Id:
                      type: string
                    Size:
                      format: int64
                      type: integer
                    Tags:
                      items:
                        type: string
                      type: array
                  type: object
                type: array
            text/plain:
              schema:
                items:
                  properties:
                    Comment:
                      type: string
                    Created:
                      format: int64
                      type: integer
                    CreatedBy:
                      type: string
                    Id:
                      type: string
                    Size:
                      format: int64
                      type: integer
                    Tags:
                      items:
                        type: string
                      type: array
                  type: object
                type: array
          description: No error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: No such image
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      tags:
        - Image
      description: Return parent layers of an image.
      operationId: ImageHistory
      summary: Get the history of an image
  '/images/{name}/json':
    get:
      parameters:
        - description: Image name or id
          in: path
          name: name
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    Architecture: amd64
                    Author: ''
                    Comment: ''
                    Config:
                      AttachStderr: false
                      AttachStdin: false
                      AttachStdout: false
                      Cmd:
                        - /bin/bash
                      Domainname: ''
                      Env:
                        - >-
                          PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
                      Hostname: e611e15f9c9d
                      Image: >-
                        91e54dfb11794fad694460162bf0cb0a4fa710cfa3f60979c177d920813e267c
                      Labels:
                        com.example.license: GPL
                        com.example.vendor: Acme
                        com.example.version: '1.0'
                      MacAddress: ''
                      NetworkDisabled: false
                      OnBuild: []
                      OpenStdin: false
                      PublishService: ''
                      StdinOnce: false
                      Tty: false
                      User: ''
                      WorkingDir: ''
                    Container: >-
                      cb91e48a60d01f1e27028b4fc6819f4f290b3cf12496c8176ec714d0d390984a
                    ContainerConfig:
                      AttachStderr: false
                      AttachStdin: false
                      AttachStdout: false
                      Cmd:
                        - /bin/sh
                        - '-c'
                        - >-
                          #(nop) LABEL com.example.vendor=Acme
                          com.example.license=GPL com.example.version=1.0
                      Domainname: ''
                      Env:
                        - >-
                          PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
                      Hostname: e611e15f9c9d
                      Image: >-
                        91e54dfb11794fad694460162bf0cb0a4fa710cfa3f60979c177d920813e267c
                      Labels:
                        com.example.license: GPL
                        com.example.vendor: Acme
                        com.example.version: '1.0'
                      MacAddress: ''
                      NetworkDisabled: false
                      OnBuild: []
                      OpenStdin: false
                      PublishService: ''
                      StdinOnce: false
                      Tty: false
                      User: ''
                      WorkingDir: ''
                    Created: '2015-09-10T08:30:53.26995814Z'
                    DockerVersion: 1.9.0-dev
                    GraphDriver:
                      Name: aufs
                    Id: >-
                      sha256:85f05633ddc1c50679be2b16a0479ab6f7637f8884e0cfe0f4d20e1ebb3d6e7c
                    Os: linux
                    Parent: >-
                      sha256:91e54dfb11794fad694460162bf0cb0a4fa710cfa3f60979c177d920813e267c
                    RepoDigests:
                      - >-
                        localhost:5000/test/busybox/example@sha256:cbbf2f9a99b47fc460d422812b6a5adff7dfee951d8fa2e4a98caa0382cfbdbf
                    RepoTags:
                      - 'example:1.0'
                      - 'example:latest'
                      - 'example:stable'
                    RootFS:
                      Layers:
                        - >-
                          sha256:1834950e52ce4d5a88a1bbd131c537f4d0e56d10ff0dd69e66be3b7dfa9df7e6
                        - >-
                          sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef
                      Type: layers
                    Size: 0
                    VirtualSize: 188359297
              schema:
                $ref: '#/components/schemas/Image'
            text/plain:
              schema:
                $ref: '#/components/schemas/Image'
          description: No error
        '404':
          content:
            application/json:
              examples:
                response:
                  value:
                    message: 'No such image: someimage (tag: latest)'
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: No such image
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      tags:
        - Image
      description: Return low-level information about an image.
      operationId: ImageInspect
      summary: Inspect an image
  '/images/{name}/push':
    post:
      parameters:
        - description: Image name or ID.
          in: path
          name: name
          required: true
          schema:
            type: string
        - description: The tag to associate with the image on the registry.
          in: query
          name: tag
          schema:
            type: string
        - description: >-
            A base64-encoded auth configuration. [See the authentication section
            for details.](#section/Authentication)
          in: header
          name: X-Registry-Auth
          required: true
          schema:
            type: string
      responses:
        '200':
          description: No error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: No such image
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      tags:
        - Image
      description: >
        Push an image to a registry.


        If you wish to push an image on to a private registry, that image must
        already have a tag which references the registry. For example,
        `registry.example.com/myimage:latest`.


        The push is cancelled if the HTTP connection is closed.
      operationId: ImagePush
      summary: Push an image
  '/images/{name}/tag':
    post:
      parameters:
        - description: Image name or ID to tag.
          in: path
          name: name
          required: true
          schema:
            type: string
        - description: 'The repository to tag in. For example, `someuser/someimage`.'
          in: query
          name: repo
          schema:
            type: string
        - description: The name of the new tag.
          in: query
          name: tag
          schema:
            type: string
      responses:
        '201':
          description: No error
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad parameter
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: No such image
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Conflict
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      tags:
        - Image
      description: Tag an image so that it becomes part of a repository.
      operationId: ImageTag
      summary: Tag an image
  /info:
    get:
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    Architecture: x86_64
                    CgroupDriver: cgroupfs
                    ClusterStore: 'etcd://localhost:2379'
                    Containers: 11
                    ContainersPaused: 1
                    ContainersRunning: 7
                    ContainersStopped: 3
                    CpuCfsPeriod: true
                    CpuCfsQuota: true
                    Debug: false
                    DockerRootDir: /var/lib/docker
                    Driver: btrfs
                    DriverStatus:
                      - - ''
                    ExperimentalBuild: false
                    HttpProxy: 'http://test:test@localhost:8080'
                    HttpsProxy: 'https://test:test@localhost:8080'
                    ID: >-
                      7TRN:IPZB:QYBB:VPBQ:UMPP:KARE:6ZNR:XE6T:7EWV:PKF4:ZOJD:TPYS
                    IPv4Forwarding: true
                    Images: 16
                    IndexServerAddress: 'https://index.docker.io/v1/'
                    InitPath: /usr/bin/docker
                    InitSha1: ''
                    KernelMemory: true
                    KernelVersion: 3.12.0-1-amd64
                    Labels:
                      - storage=ssd
                    MemTotal: 2099236864
                    MemoryLimit: true
                    NCPU: 1
                    NEventsListener: 0
                    NFd: 11
                    NGoroutines: 21
                    Name: prod-server-42
                    NoProxy: 9.81.1.160
                    OSType: linux
                    OomKillDisable: true
                    OperatingSystem: Boot2Docker
                    Plugins:
                      Network:
                        - 'null'
                        - host
                        - bridge
                      Volume:
                        - local
                    RegistryConfig:
                      IndexConfigs:
                        docker.io:
                          Name: docker.io
                          Official: true
                          Secure: true
                      InsecureRegistryCIDRs:
                        - 127.0.0.0/8
                    SecurityOptions:
                      - Key: Name
                        Value: seccomp
                      - Key: Profile
                        Value: default
                      - Key: Name
                        Value: apparmor
                      - Key: Name
                        Value: selinux
                      - Key: Name
                        Value: userns
                    ServerVersion: 1.9.0
                    SwapLimit: false
                    SystemStatus:
                      - - State
                        - Healthy
                    SystemTime: '2015-03-10T11:11:23.730591467-07:00'
              schema:
                properties:
                  Architecture:
                    type: string
                  Containers:
                    type: integer
                  ContainersPaused:
                    type: integer
                  ContainersRunning:
                    type: integer
                  ContainersStopped:
                    type: integer
                  CpuCfsPeriod:
                    type: boolean
                  CpuCfsQuota:
                    type: boolean
                  Debug:
                    type: boolean
                  DiscoveryBackend:
                    type: string
                  DockerRootDir:
                    type: string
                  Driver:
                    type: string
                  DriverStatus:
                    items:
                      items:
                        type: string
                      type: array
                    type: array
                  ExperimentalBuild:
                    type: boolean
                  HttpProxy:
                    type: string
                  HttpsProxy:
                    type: string
                  ID:
                    type: string
                  IPv4Forwarding:
                    type: boolean
                  Images:
                    type: integer
                  IndexServerAddress:
                    type: string
                  InitPath:
                    type: string
                  InitSha1:
                    type: string
                  KernelVersion:
                    type: string
                  Labels:
                    items:
                      type: string
                    type: array
                  MemTotal:
                    type: integer
                  MemoryLimit:
                    type: boolean
                  NCPU:
                    type: integer
                  NEventsListener:
                    type: integer
                  NFd:
                    type: integer
                  NGoroutines:
                    type: integer
                  Name:
                    type: string
                  NoProxy:
                    type: string
                  OSType:
                    type: string
                  OomKillDisable:
                    type: boolean
                  OomScoreAdj:
                    type: integer
                  OperatingSystem:
                    type: string
                  Plugins:
                    properties:
                      Network:
                        items:
                          type: string
                        type: array
                      Volume:
                        items:
                          type: string
                        type: array
                    type: object
                  RegistryConfig:
                    properties:
                      IndexConfigs:
                        additionalProperties:
                          properties:
                            Mirrors:
                              items:
                                type: string
                              type: array
                            Name:
                              type: string
                            Official:
                              type: boolean
                            Secure:
                              type: boolean
                          type: object
                        type: object
                      InsecureRegistryCIDRs:
                        items:
                          type: string
                        type: array
                    type: object
                  ServerVersion:
                    type: string
                  SwapLimit:
                    type: boolean
                  SystemStatus:
                    items:
                      items:
                        type: string
                      type: array
                    type: array
                  SystemTime:
                    type: string
                type: object
            text/plain:
              schema:
                properties:
                  Architecture:
                    type: string
                  Containers:
                    type: integer
                  ContainersPaused:
                    type: integer
                  ContainersRunning:
                    type: integer
                  ContainersStopped:
                    type: integer
                  CpuCfsPeriod:
                    type: boolean
                  CpuCfsQuota:
                    type: boolean
                  Debug:
                    type: boolean
                  DiscoveryBackend:
                    type: string
                  DockerRootDir:
                    type: string
                  Driver:
                    type: string
                  DriverStatus:
                    items:
                      items:
                        type: string
                      type: array
                    type: array
                  ExperimentalBuild:
                    type: boolean
                  HttpProxy:
                    type: string
                  HttpsProxy:
                    type: string
                  ID:
                    type: string
                  IPv4Forwarding:
                    type: boolean
                  Images:
                    type: integer
                  IndexServerAddress:
                    type: string
                  InitPath:
                    type: string
                  InitSha1:
                    type: string
                  KernelVersion:
                    type: string
                  Labels:
                    items:
                      type: string
                    type: array
                  MemTotal:
                    type: integer
                  MemoryLimit:
                    type: boolean
                  NCPU:
                    type: integer
                  NEventsListener:
                    type: integer
                  NFd:
                    type: integer
                  NGoroutines:
                    type: integer
                  Name:
                    type: string
                  NoProxy:
                    type: string
                  OSType:
                    type: string
                  OomKillDisable:
                    type: boolean
                  OomScoreAdj:
                    type: integer
                  OperatingSystem:
                    type: string
                  Plugins:
                    properties:
                      Network:
                        items:
                          type: string
                        type: array
                      Volume:
                        items:
                          type: string
                        type: array
                    type: object
                  RegistryConfig:
                    properties:
                      IndexConfigs:
                        additionalProperties:
                          properties:
                            Mirrors:
                              items:
                                type: string
                              type: array
                            Name:
                              type: string
                            Official:
                              type: boolean
                            Secure:
                              type: boolean
                          type: object
                        type: object
                      InsecureRegistryCIDRs:
                        items:
                          type: string
                        type: array
                    type: object
                  ServerVersion:
                    type: string
                  SwapLimit:
                    type: boolean
                  SystemStatus:
                    items:
                      items:
                        type: string
                      type: array
                    type: array
                  SystemTime:
                    type: string
                type: object
          description: No error
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      tags:
        - System
      operationId: SystemInfo
      summary: Get system information
  /networks:
    get:
      parameters:
        - description: >
            JSON encoded value of the filters (a `map[string][]string`) to
            process on the networks list. Available filters:


            - `driver=<driver-name>` Matches a network's driver.

            - `id=<network-id>` Matches all or part of a network ID.

            - `label=<key>` or `label=<key>=<value>` of a network label.

            - `name=<network-name>` Matches all or part of a network name.

            - `type=["custom"|"builtin"]` Filters networks by type. The `custom`
            keyword returns all user-defined networks.
          in: query
          name: filters
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    - Containers:
                        39b69226f9d79f5634485fb236a23b2fe4e96a0a94128390a7fbbcc167065867:
                          EndpointID: >-
                            ed2419a97c1d9954d05b46e462e7002ea552f216e9b136b80a7db8d98b442eda
                          IPv4Address: 172.17.0.2/16
                          IPv6Address: ''
                          MacAddress: '02:42:ac:11:00:02'
                      Created: '2016-10-19T06:21:00.416543526Z'
                      Driver: bridge
                      EnableIPv6: false
                      IPAM:
                        Config:
                          - Subnet: 172.17.0.0/16
                        Driver: default
                      Id: >-
                        f2de39df4171b0dc801e8002d1d999b77256983dfc63041c0f34030aa3977566
                      Internal: false
                      Name: bridge
                      Options:
                        com.docker.network.bridge.default_bridge: 'true'
                        com.docker.network.bridge.enable_icc: 'true'
                        com.docker.network.bridge.enable_ip_masquerade: 'true'
                        com.docker.network.bridge.host_binding_ipv4: 0.0.0.0
                        com.docker.network.bridge.name: docker0
                        com.docker.network.driver.mtu: '1500'
                      Scope: local
                    - Containers: {}
                      Created: '0001-01-01T00:00:00Z'
                      Driver: 'null'
                      EnableIPv6: false
                      IPAM:
                        Config: []
                        Driver: default
                      Id: >-
                        e086a3893b05ab69242d3c44e49483a3bbbd3a26b46baa8f61ab797c1088d794
                      Internal: false
                      Name: none
                      Options: {}
                      Scope: local
                    - Containers: {}
                      Created: '0001-01-01T00:00:00Z'
                      Driver: host
                      EnableIPv6: false
                      IPAM:
                        Config: []
                        Driver: default
                      Id: >-
                        13e871235c677f196c4e1ecebb9dc733b9b2d2ab589e30c539efeda84a24215e
                      Internal: false
                      Name: host
                      Options: {}
                      Scope: local
              schema:
                items:
                  $ref: '#/components/schemas/Network'
                type: array
            text/plain:
              schema:
                items:
                  $ref: '#/components/schemas/Network'
                type: array
          description: No error
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      tags:
        - Network
      operationId: NetworkList
      summary: List networks
  /networks/create:
    post:
      responses:
        '201':
          content:
            application/json:
              schema:
                example:
                  Id: >-
                    22be93d5babb089c5aab8dbc369042fad48ff791584ca2da2100db837a1c7c30
                  Warning: ''
                properties:
                  Id:
                    description: The ID of the created network.
                    type: string
                  Warning:
                    type: string
                type: object
            text/plain:
              schema:
                example:
                  Id: >-
                    22be93d5babb089c5aab8dbc369042fad48ff791584ca2da2100db837a1c7c30
                  Warning: ''
                properties:
                  Id:
                    description: The ID of the created network.
                    type: string
                  Warning:
                    type: string
                type: object
          description: No error
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: operation not supported for pre-defined networks
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: plugin not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      tags:
        - Network
      operationId: NetworkCreate
      requestBody:
        content:
          application/json:
            schema:
              example:
                CheckDuplicate: false
                Driver: bridge
                EnableIPv6: true
                IPAM:
                  Config:
                    - Gateway: 172.20.10.11
                      IPRange: 172.20.10.0/24
                      Subnet: 172.20.0.0/16
                    - Gateway: '2001:db8:abcd::1011'
                      Subnet: '2001:db8:abcd::/64'
                  Driver: default
                  Options:
                    foo: bar
                Internal: true
                Labels:
                  com.example.some-label: some-value
                  com.example.some-other-label: some-other-value
                Name: isolated_nw
                Options:
                  com.docker.network.bridge.default_bridge: 'true'
                  com.docker.network.bridge.enable_icc: 'true'
                  com.docker.network.bridge.enable_ip_masquerade: 'true'
                  com.docker.network.bridge.host_binding_ipv4: 0.0.0.0
                  com.docker.network.bridge.name: docker0
                  com.docker.network.driver.mtu: '1500'
              properties:
                CheckDuplicate:
                  description: Check for networks with duplicate names.
                  type: boolean
                Driver:
                  default: bridge
                  description: Name of the network driver plugin to use.
                  type: string
                EnableIPv6:
                  description: Enable IPv6 on the network.
                  type: boolean
                IPAM:
                  $ref: '#/components/schemas/IPAM'
                  description: Optional custom IP scheme for the network.
                Internal:
                  description: Restrict external access to the network.
                  type: boolean
                Labels:
                  additionalProperties:
                    type: string
                  description: User-defined key/value metadata.
                  type: object
                Name:
                  description: The network's name.
                  type: string
                Options:
                  additionalProperties:
                    type: string
                  description: Network specific options to be used by the drivers.
                  type: object
              required:
                - Name
              type: object
          text/plain:
            schema:
              example:
                CheckDuplicate: false
                Driver: bridge
                EnableIPv6: true
                IPAM:
                  Config:
                    - Gateway: 172.20.10.11
                      IPRange: 172.20.10.0/24
                      Subnet: 172.20.0.0/16
                    - Gateway: '2001:db8:abcd::1011'
                      Subnet: '2001:db8:abcd::/64'
                  Driver: default
                  Options:
                    foo: bar
                Internal: true
                Labels:
                  com.example.some-label: some-value
                  com.example.some-other-label: some-other-value
                Name: isolated_nw
                Options:
                  com.docker.network.bridge.default_bridge: 'true'
                  com.docker.network.bridge.enable_icc: 'true'
                  com.docker.network.bridge.enable_ip_masquerade: 'true'
                  com.docker.network.bridge.host_binding_ipv4: 0.0.0.0
                  com.docker.network.bridge.name: docker0
                  com.docker.network.driver.mtu: '1500'
              properties:
                CheckDuplicate:
                  description: Check for networks with duplicate names.
                  type: boolean
                Driver:
                  default: bridge
                  description: Name of the network driver plugin to use.
                  type: string
                EnableIPv6:
                  description: Enable IPv6 on the network.
                  type: boolean
                IPAM:
                  $ref: '#/components/schemas/IPAM'
                  description: Optional custom IP scheme for the network.
                Internal:
                  description: Restrict external access to the network.
                  type: boolean
                Labels:
                  additionalProperties:
                    type: string
                  description: User-defined key/value metadata.
                  type: object
                Name:
                  description: The network's name.
                  type: string
                Options:
                  additionalProperties:
                    type: string
                  description: Network specific options to be used by the drivers.
                  type: object
              required:
                - Name
              type: object
        description: Network configuration
        required: true
      summary: Create a network
  /networks/prune:
    post:
      parameters:
        - description: >
            Filters to process on the prune list, encoded as JSON (a
            `map[string][]string`).


            Available filters:
          in: query
          name: filters
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  VolumesDeleted:
                    description: Networks that were deleted
                    items:
                      type: string
                    type: array
                type: object
            text/plain:
              schema:
                properties:
                  VolumesDeleted:
                    description: Networks that were deleted
                    items:
                      type: string
                    type: array
                type: object
          description: No error
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      tags:
        - Network
      operationId: NetworkPrune
      summary: Delete unused networks
  '/networks/{id}':
    delete:
      parameters:
        - description: Network ID or name
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: no such network
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      tags:
        - Network
      operationId: NetworkDelete
      summary: Remove a network
    get:
      parameters:
        - description: Network ID or name
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Network'
            text/plain:
              schema:
                $ref: '#/components/schemas/Network'
          description: No error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Network not found
      tags:
        - Network
      operationId: NetworkInspect
      summary: Inspect a network
  '/networks/{id}/connect':
    post:
      parameters:
        - description: Network ID or name
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: No error
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Operation not supported for swarm scoped networks
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Network or container not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      tags:
        - Network
      operationId: NetworkConnect
      requestBody:
        content:
          application/json:
            schema:
              example:
                Container: 3613f73ba0e4
                EndpointConfig:
                  IPAMConfig:
                    IPv4Address: 172.24.56.89
                    IPv6Address: '2001:db8::5689'
              properties:
                Container:
                  description: The ID or name of the container to connect to the network.
                  type: string
                EndpointConfig:
                  $ref: '#/components/schemas/EndpointSettings'
              type: object
          application/octet-stream:
            schema:
              example:
                Container: 3613f73ba0e4
                EndpointConfig:
                  IPAMConfig:
                    IPv4Address: 172.24.56.89
                    IPv6Address: '2001:db8::5689'
              properties:
                Container:
                  description: The ID or name of the container to connect to the network.
                  type: string
                EndpointConfig:
                  $ref: '#/components/schemas/EndpointSettings'
              type: object
          text/plain:
            schema:
              example:
                Container: 3613f73ba0e4
                EndpointConfig:
                  IPAMConfig:
                    IPv4Address: 172.24.56.89
                    IPv6Address: '2001:db8::5689'
              properties:
                Container:
                  description: The ID or name of the container to connect to the network.
                  type: string
                EndpointConfig:
                  $ref: '#/components/schemas/EndpointSettings'
              type: object
        required: true
      summary: Connect a container to a network
  '/networks/{id}/disconnect':
    post:
      parameters:
        - description: Network ID or name
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: No error
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Operation not supported for swarm scoped networks
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Network or container not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      tags:
        - Network
      operationId: NetworkDisconnect
      requestBody:
        content:
          application/json:
            schema:
              properties:
                Container:
                  description: >-
                    The ID or name of the container to disconnect from the
                    network.
                  type: string
                Force:
                  description: Force the container to disconnect from the network.
                  type: boolean
              type: object
          text/plain:
            schema:
              properties:
                Container:
                  description: >-
                    The ID or name of the container to disconnect from the
                    network.
                  type: string
                Force:
                  description: Force the container to disconnect from the network.
                  type: boolean
              type: object
        required: true
      summary: Disconnect a container from a network
  /nodes:
    get:
      parameters:
        - description: >
            Filters to process on the nodes list, encoded as JSON (a
            `map[string][]string`).


            Available filters:

            - `id=<node id>`

            - `label=<engine label>`

            - `membership=`(`accepted`|`pending`)`

            - `name=<node name>`

            - `role=`(`manager`|`worker`)`
          in: query
          name: filters
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Node'
                type: array
            text/plain:
              schema:
                items:
                  $ref: '#/components/schemas/Node'
                type: array
          description: no error
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      tags:
        - Node
      operationId: NodeList
      summary: List nodes
  '/nodes/{id}':
    delete:
      parameters:
        - description: The ID or name of the node
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: Force remove a node from the swarm
          in: query
          name: force
          schema:
            default: false
            type: boolean
      responses:
        '200':
          description: no error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: no such node
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      tags:
        - Node
      operationId: NodeDelete
      summary: Delete a node
    get:
      parameters:
        - description: The ID or name of the node
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
            text/plain:
              schema:
                $ref: '#/components/schemas/Node'
          description: no error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: no such node
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      tags:
        - Node
      operationId: NodeInspect
      summary: Inspect a node
  '/nodes/{id}/update':
    post:
      parameters:
        - description: The ID of the node
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: >-
            The version number of the node object being updated. This is
            required to avoid conflicting writes.
          in: query
          name: version
          required: true
          schema:
            format: int64
            type: integer
      responses:
        '200':
          description: no error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: no such node
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      tags:
        - Node
      operationId: NodeUpdate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeSpec'
          text/plain:
            schema:
              $ref: '#/components/schemas/NodeSpec'
      summary: Update a node
  /plugins:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                example:
                  - Active: true
                    Config:
                      Args:
                        Description: command line arguments
                        Name: args
                        Value: []
                      Description: A sample volume plugin for Docker
                      Documentation: 'https://docs.docker.com/engine/extend/plugins/'
                      Entrypoint:
                        - /usr/bin/sample-volume-plugin
                        - /data
                      Env:
                        - Description: 'If set, prints debug messages'
                          Name: DEBUG
                          Value: '0'
                      Interface:
                        Socket: plugins.sock
                        Types:
                          - docker.volumedriver/1.0
                      Linux:
                        AllowAllDevices: false
                      Network:
                        Type: ''
                      PropagatedMount: /data
                      User: {}
                      WorkDir: ''
                    Id: >-
                      5724e2c8652da337ab2eedd19fc6fc0ec908e4bd907c7421bf6a8dfc70c4c078
                    Name: tiborvass/sample-volume-plugin
                    Settings:
                      Env:
                        - DEBUG=0
                    Tag: latest
                items:
                  $ref: '#/components/schemas/Plugin'
                type: array
            text/plain:
              schema:
                example:
                  - Active: true
                    Config:
                      Args:
                        Description: command line arguments
                        Name: args
                        Value: []
                      Description: A sample volume plugin for Docker
                      Documentation: 'https://docs.docker.com/engine/extend/plugins/'
                      Entrypoint:
                        - /usr/bin/sample-volume-plugin
                        - /data
                      Env:
                        - Description: 'If set, prints debug messages'
                          Name: DEBUG
                          Value: '0'
                      Interface:
                        Socket: plugins.sock
                        Types:
                          - docker.volumedriver/1.0
                      Linux:
                        AllowAllDevices: false
                      Network:
                        Type: ''
                      PropagatedMount: /data
                      User: {}
                      WorkDir: ''
                    Id: >-
                      5724e2c8652da337ab2eedd19fc6fc0ec908e4bd907c7421bf6a8dfc70c4c078
                    Name: tiborvass/sample-volume-plugin
                    Settings:
                      Env:
                        - DEBUG=0
                    Tag: latest
                items:
                  $ref: '#/components/schemas/Plugin'
                type: array
          description: No error
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      tags:
        - Plugin
      description: Returns information about installed plugins.
      operationId: PluginList
      summary: List plugins
  /plugins/create:
    post:
      parameters:
        - description: >-
            The name of the plugin. The `:latest` tag is optional, and is the
            default if omitted.
          in: query
          name: name
          required: true
          schema:
            type: string
      responses:
        '204':
          description: no error
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      tags:
        - Plugin
      operationId: PluginCreate
      requestBody:
        content:
          application/json:
            schema:
              format: binary
              type: string
          application/x-tar:
            schema:
              format: binary
              type: string
          text/plain:
            schema:
              format: binary
              type: string
        description: Path to tar containing plugin rootfs and manifest
      summary: Create a plugin
  /plugins/privileges:
    get:
      parameters:
        - description: >-
            The name of the plugin. The `:latest` tag is optional, and is the
            default if omitted.
          in: query
          name: name
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                example:
                  - Description: ''
                    Name: network
                    Value:
                      - host
                  - Description: ''
                    Name: mount
                    Value:
                      - /data
                  - Description: ''
                    Name: device
                    Value:
                      - /dev/cpu_dma_latency
                items:
                  description: >-
                    Describes a permission the user has to accept upon
                    installing the plugin.
                  properties:
                    Description:
                      type: string
                    Name:
                      type: string
                    Value:
                      items:
                        type: string
                      type: array
                  type: object
                type: array
            text/plain:
              schema:
                example:
                  - Description: ''
                    Name: network
                    Value:
                      - host
                  - Description: ''
                    Name: mount
                    Value:
                      - /data
                  - Description: ''
                    Name: device
                    Value:
                      - /dev/cpu_dma_latency
                items:
                  description: >-
                    Describes a permission the user has to accept upon
                    installing the plugin.
                  properties:
                    Description:
                      type: string
                    Name:
                      type: string
                    Value:
                      items:
                        type: string
                      type: array
                  type: object
                type: array
          description: no error
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      tags:
        - Plugin
      operationId: GetPluginPrivileges
      summary: Get plugin privileges
  /plugins/pull:
    post:
      parameters:
        - description: >
            Remote reference for plugin to install.


            The `:latest` tag is optional, and is used as the default if
            omitted.
          in: query
          name: remote
          required: true
          schema:
            type: string
        - description: >
            Local name for the pulled plugin.


            The `:latest` tag is optional, and is used as the default if
            omitted.
          in: query
          name: name
          required: false
          schema:
            type: string
        - description: >-
            A base64-encoded auth configuration to use when pulling a plugin
            from a registry. [See the authentication section for
            details.](#section/Authentication)
          in: header
          name: X-Registry-Auth
          schema:
            type: string
      responses:
        '204':
          description: no error
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      tags:
        - Plugin
      description: >
        Pulls and installs a plugin. After the plugin is installed, it can be
        enabled using the [`POST /plugins/{name}/enable`
        endpoint](#operation/PostPluginsEnable).
      operationId: PluginPull
      requestBody:
        content:
          application/json:
            schema:
              example:
                - Description: ''
                  Name: network
                  Value:
                    - host
                - Description: ''
                  Name: mount
                  Value:
                    - /data
                - Description: ''
                  Name: device
                  Value:
                    - /dev/cpu_dma_latency
              items:
                description: >-
                  Describes a permission accepted by the user upon installing
                  the plugin.
                properties:
                  Description:
                    type: string
                  Name:
                    type: string
                  Value:
                    items:
                      type: string
                    type: array
                type: object
              type: array
          text/plain:
            schema:
              example:
                - Description: ''
                  Name: network
                  Value:
                    - host
                - Description: ''
                  Name: mount
                  Value:
                    - /data
                - Description: ''
                  Name: device
                  Value:
                    - /dev/cpu_dma_latency
              items:
                description: >-
                  Describes a permission accepted by the user upon installing
                  the plugin.
                properties:
                  Description:
                    type: string
                  Name:
                    type: string
                  Value:
                    items:
                      type: string
                    type: array
                type: object
              type: array
      summary: Install a plugin
  '/plugins/{name}':
    delete:
      parameters:
        - description: >-
            The name of the plugin. The `:latest` tag is optional, and is the
            default if omitted.
          in: path
          name: name
          required: true
          schema:
            type: string
        - description: >-
            Disable the plugin before removing. This may result in issues if the
            plugin is in use by a container.
          in: query
          name: force
          schema:
            default: false
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plugin'
            text/plain:
              schema:
                $ref: '#/components/schemas/Plugin'
          description: no error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: plugin is not installed
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      tags:
        - Plugin
      operationId: PluginDelete
      summary: Remove a plugin
  '/plugins/{name}/disable':
    post:
      parameters:
        - description: >-
            The name of the plugin. The `:latest` tag is optional, and is the
            default if omitted.
          in: path
          name: name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: no error
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      tags:
        - Plugin
      operationId: PluginDisable
      summary: Disable a plugin
  '/plugins/{name}/enable':
    post:
      parameters:
        - description: >-
            The name of the plugin. The `:latest` tag is optional, and is the
            default if omitted.
          in: path
          name: name
          required: true
          schema:
            type: string
        - description: Set the HTTP client timeout (in seconds)
          in: query
          name: timeout
          schema:
            default: 0
            type: integer
      responses:
        '200':
          description: no error
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      tags:
        - Plugin
      operationId: PluginEnable
      summary: Enable a plugin
  '/plugins/{name}/json':
    get:
      parameters:
        - description: >-
            The name of the plugin. The `:latest` tag is optional, and is the
            default if omitted.
          in: path
          name: name
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plugin'
            text/plain:
              schema:
                $ref: '#/components/schemas/Plugin'
          description: no error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: plugin is not installed
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      tags:
        - Plugin
      operationId: PluginInspect
      summary: Inspect a plugin
  '/plugins/{name}/push':
    post:
      parameters:
        - description: >-
            The name of the plugin. The `:latest` tag is optional, and is the
            default if omitted.
          in: path
          name: name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: no error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: plugin not installed
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      tags:
        - Plugin
      description: |
        Push a plugin to the registry.
      operationId: PluginPush
      summary: Push a plugin
  '/plugins/{name}/set':
    post:
      parameters:
        - description: >-
            The name of the plugin. The `:latest` tag is optional, and is the
            default if omitted.
          in: path
          name: name
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Plugin not installed
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      tags:
        - Plugin
      operationId: PluginSet
      requestBody:
        content:
          application/json:
            schema:
              example:
                - DEBUG=1
              items:
                type: string
              type: array
          text/plain:
            schema:
              example:
                - DEBUG=1
              items:
                type: string
              type: array
      summary: Configure a plugin
  /secrets:
    get:
      parameters:
        - description: >
            A JSON encoded value of the filters (a `map[string][]string`) to
            process on the secrets list. Available filters:


            - `names=<secret name>`
          in: query
          name: filters
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                example:
                  - CreatedAt: '2016-11-05T01:20:17.327670065Z'
                    ID: ktnbjxoalbkvbvedmg1urrz8h
                    Spec:
                      Name: app-dev.crt
                    UpdatedAt: '2016-11-05T01:20:17.327670065Z'
                    Version:
                      Index: 11
                items:
                  $ref: '#/components/schemas/Secret'
                type: array
            text/plain:
              schema:
                example:
                  - CreatedAt: '2016-11-05T01:20:17.327670065Z'
                    ID: ktnbjxoalbkvbvedmg1urrz8h
                    Spec:
                      Name: app-dev.crt
                    UpdatedAt: '2016-11-05T01:20:17.327670065Z'
                    Version:
                      Index: 11
                items:
                  $ref: '#/components/schemas/Secret'
                type: array
          description: no error
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      tags:
        - Secret
      operationId: SecretList
      summary: List secrets
  /secrets/create:
    post:
      responses:
        '201':
          content:
            application/json:
              schema:
                example:
                  ID: ktnbjxoalbkvbvedmg1urrz8h
                properties:
                  ID:
                    description: The ID of the created secret.
                    type: string
                type: object
            text/plain:
              schema:
                example:
                  ID: ktnbjxoalbkvbvedmg1urrz8h
                properties:
                  ID:
                    description: The ID of the created secret.
                    type: string
                type: object
          description: no error
        '406':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error or node is not part of a swarm
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: name conflicts with an existing object
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      tags:
        - Secret
      operationId: SecretCreate
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/SecretSpec'
                - example:
                    Data: VEhJUyBJUyBOT1QgQSBSRUFMIENFUlRJRklDQVRFCg==
                    Labels:
                      foo: bar
                    Name: app-key.crt
                  type: object
          text/plain:
            schema:
              allOf:
                - $ref: '#/components/schemas/SecretSpec'
                - example:
                    Data: VEhJUyBJUyBOT1QgQSBSRUFMIENFUlRJRklDQVRFCg==
                    Labels:
                      foo: bar
                    Name: app-key.crt
                  type: object
      summary: Create a secret
  '/secrets/{id}':
    delete:
      parameters:
        - description: ID of the secret
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: no error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: secret not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      tags:
        - Secret
      operationId: SecretDelete
      summary: Delete a secret
    get:
      parameters:
        - description: ID of the secret
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Secret'
                example:
                  CreatedAt: '2016-11-05T01:20:17.327670065Z'
                  ID: ktnbjxoalbkvbvedmg1urrz8h
                  Spec:
                    Name: app-dev.crt
                  UpdatedAt: '2016-11-05T01:20:17.327670065Z'
                  Version:
                    Index: 11
            text/plain:
              schema:
                $ref: '#/components/schemas/Secret'
                example:
                  CreatedAt: '2016-11-05T01:20:17.327670065Z'
                  ID: ktnbjxoalbkvbvedmg1urrz8h
                  Spec:
                    Name: app-dev.crt
                  UpdatedAt: '2016-11-05T01:20:17.327670065Z'
                  Version:
                    Index: 11
          description: no error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: secret not found
        '406':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: node is not part of a swarm
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      tags:
        - Secret
      operationId: SecretInspect
      summary: Inspect a secret
  /services:
    get:
      parameters:
        - description: >
            A JSON encoded value of the filters (a `map[string][]string`) to
            process on the services list. Available filters:


            - `id=<service id>`

            - `name=<service name>`

            - `label=<service label>`
          in: query
          name: filters
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Service'
                type: array
            text/plain:
              schema:
                items:
                  $ref: '#/components/schemas/Service'
                type: array
          description: no error
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      tags:
        - Service
      operationId: ServiceList
      summary: List services
  /services/create:
    post:
      parameters:
        - description: >-
            A base64-encoded auth configuration for pulling from private
            registries. [See the authentication section for
            details.](#section/Authentication)
          in: header
          name: X-Registry-Auth
          schema:
            type: string
      responses:
        '201':
          content:
            application/json:
              schema:
                example:
                  ID: ak7w3gjqoa3kuz8xcpnyy0pvl
                  Warning: >-
                    unable to pin image doesnotexist:latest to digest: image
                    library/doesnotexist:latest not found
                properties:
                  ID:
                    description: The ID of the created service.
                    type: string
                  Warning:
                    description: Optional warning message
                    type: string
                type: object
            text/plain:
              schema:
                example:
                  ID: ak7w3gjqoa3kuz8xcpnyy0pvl
                  Warning: >-
                    unable to pin image doesnotexist:latest to digest: image
                    library/doesnotexist:latest not found
                properties:
                  ID:
                    description: The ID of the created service.
                    type: string
                  Warning:
                    description: Optional warning message
                    type: string
                type: object
          description: no error
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: network is not eligible for services
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: name conflicts with an existing service
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
        '503':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error or node is not part of a swarm
      tags:
        - Service
      operationId: ServiceCreate
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/ServiceSpec'
                - example:
                    EndpointSpec:
                      Ports:
                        - Protocol: tcp
                          PublishedPort: 8080
                          TargetPort: 80
                    Labels:
                      foo: bar
                    Mode:
                      Replicated:
                        Replicas: 4
                    Name: web
                    TaskTemplate:
                      ContainerSpec:
                        DNSConfig:
                          Nameservers:
                            - 8.8.8.8
                          Options:
                            - 'timeout:3'
                          Search:
                            - example.org
                        Image: 'nginx:alpine'
                        Mounts:
                          - ReadOnly: true
                            Source: web-data
                            Target: /usr/share/nginx/html
                            Type: volume
                            VolumeOptions:
                              DriverConfig: {}
                              Labels:
                                com.example.something: something-value
                        User: '33'
                      LogDriver:
                        Name: json-file
                        Options:
                          max-file: '3'
                          max-size: 10M
                      Placement: {}
                      Resources:
                        Limits:
                          MemoryBytes: 104857600
                        Reservations: {}
                      RestartPolicy:
                        Condition: on-failure
                        Delay: 10000000000
                        MaxAttempts: 10
                    UpdateConfig:
                      Delay: 30000000000
                      FailureAction: pause
                      Parallelism: 2
                  type: object
          text/plain:
            schema:
              allOf:
                - $ref: '#/components/schemas/ServiceSpec'
                - example:
                    EndpointSpec:
                      Ports:
                        - Protocol: tcp
                          PublishedPort: 8080
                          TargetPort: 80
                    Labels:
                      foo: bar
                    Mode:
                      Replicated:
                        Replicas: 4
                    Name: web
                    TaskTemplate:
                      ContainerSpec:
                        DNSConfig:
                          Nameservers:
                            - 8.8.8.8
                          Options:
                            - 'timeout:3'
                          Search:
                            - example.org
                        Image: 'nginx:alpine'
                        Mounts:
                          - ReadOnly: true
                            Source: web-data
                            Target: /usr/share/nginx/html
                            Type: volume
                            VolumeOptions:
                              DriverConfig: {}
                              Labels:
                                com.example.something: something-value
                        User: '33'
                      LogDriver:
                        Name: json-file
                        Options:
                          max-file: '3'
                          max-size: 10M
                      Placement: {}
                      Resources:
                        Limits:
                          MemoryBytes: 104857600
                        Reservations: {}
                      RestartPolicy:
                        Condition: on-failure
                        Delay: 10000000000
                        MaxAttempts: 10
                    UpdateConfig:
                      Delay: 30000000000
                      FailureAction: pause
                      Parallelism: 2
                  type: object
        required: true
      summary: Create a service
  '/services/{id}':
    delete:
      parameters:
        - description: ID or name of service.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: no error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: no such service
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      tags:
        - Service
      operationId: ServiceDelete
      summary: Delete a service
    get:
      parameters:
        - description: ID or name of service.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
            text/plain:
              schema:
                $ref: '#/components/schemas/Service'
          description: no error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: no such service
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      tags:
        - Service
      operationId: ServiceInspect
      summary: Inspect a service
  '/services/{id}/logs':
    get:
      parameters:
        - description: ID or name of the container
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: Show extra details provided to logs.
          in: query
          name: details
          schema:
            default: false
            type: boolean
        - description: >
            Return the logs as a stream.


            This will return a `101` HTTP response with a `Connection: upgrade`
            header, then hijack the HTTP connection to send raw output. For more
            information about hijacking and the stream format, [see the
            documentation for the attach endpoint](#operation/ContainerAttach).
          in: query
          name: follow
          schema:
            default: false
            type: boolean
        - description: Return logs from `stdout`
          in: query
          name: stdout
          schema:
            default: false
            type: boolean
        - description: Return logs from `stderr`
          in: query
          name: stderr
          schema:
            default: false
            type: boolean
        - description: 'Only return logs since this time, as a UNIX timestamp'
          in: query
          name: since
          schema:
            default: 0
            type: integer
        - description: Add timestamps to every log line
          in: query
          name: timestamps
          schema:
            default: false
            type: boolean
        - description: >-
            Only return this number of log lines from the end of the logs.
            Specify as an integer or `all` to output all log lines.
          in: query
          name: tail
          schema:
            default: all
            type: string
      responses:
        '101':
          content:
            application/json:
              schema:
                format: binary
                type: string
            application/vnd.docker.raw-stream:
              schema:
                format: binary
                type: string
            text/plain:
              schema:
                format: binary
                type: string
          description: logs returned as a stream
        '200':
          content:
            application/json:
              schema:
                type: string
            application/vnd.docker.raw-stream:
              schema:
                type: string
            text/plain:
              schema:
                type: string
          description: logs returned as a string in response body
        '404':
          content:
            application/json:
              examples:
                response:
                  value:
                    message: 'No such container: c2ada9df5af8'
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/vnd.docker.raw-stream:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: no such container
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/vnd.docker.raw-stream:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      tags:
        - Service
      description: >
        Get `stdout` and `stderr` logs from a service.


        **Note**: This endpoint works only for services with the `json-file` or
        `journald` logging drivers.
      operationId: ServiceLogs
      summary: Get service logs
  '/services/{id}/update':
    post:
      parameters:
        - description: ID or name of service.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: >-
            The version number of the service object being updated. This is
            required to avoid conflicting writes.
          in: query
          name: version
          required: true
          schema:
            type: integer
        - description: >-
            If the X-Registry-Auth header is not specified, this parameter
            indicates where to find registry authorization credentials. The
            valid values are `spec` and `previous-spec`.
          in: query
          name: registryAuthFrom
          schema:
            default: spec
            type: string
        - description: >-
            A base64-encoded auth configuration for pulling from private
            registries. [See the authentication section for
            details.](#section/Authentication)
          in: header
          name: X-Registry-Auth
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageDeleteResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ImageDeleteResponse'
          description: no error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: no such service
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      tags:
        - Service
      operationId: ServiceUpdate
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/ServiceSpec'
                - example:
                    EndpointSpec:
                      Mode: vip
                    Mode:
                      Replicated:
                        Replicas: 1
                    Name: top
                    TaskTemplate:
                      ContainerSpec:
                        Args:
                          - top
                        Image: busybox
                      ForceUpdate: 0
                      Placement: {}
                      Resources:
                        Limits: {}
                        Reservations: {}
                      RestartPolicy:
                        Condition: any
                        MaxAttempts: 0
                    UpdateConfig:
                      MaxFailureRatio: 0.15
                      Monitor: 15000000000
                      Parallelism: 1
                  type: object
          text/plain:
            schema:
              allOf:
                - $ref: '#/components/schemas/ServiceSpec'
                - example:
                    EndpointSpec:
                      Mode: vip
                    Mode:
                      Replicated:
                        Replicas: 1
                    Name: top
                    TaskTemplate:
                      ContainerSpec:
                        Args:
                          - top
                        Image: busybox
                      ForceUpdate: 0
                      Placement: {}
                      Resources:
                        Limits: {}
                        Reservations: {}
                      RestartPolicy:
                        Condition: any
                        MaxAttempts: 0
                    UpdateConfig:
                      MaxFailureRatio: 0.15
                      Monitor: 15000000000
                      Parallelism: 1
                  type: object
        required: true
      summary: Update a service
  /swarm:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ClusterInfo'
                  - properties:
                      JoinTokens:
                        description: >-
                          The tokens workers and managers need to join the
                          swarm.
                        properties:
                          Manager:
                            description: The token managers can use to join the swarm.
                            type: string
                          Worker:
                            description: The token workers can use to join the swarm.
                            type: string
                        type: object
                    type: object
                example:
                  CreatedAt: '2016-08-15T16:00:20.349727406Z'
                  ID: 70ilmkj2f6sp2137c753w2nmt
                  JoinTokens:
                    Manager: >-
                      SWMTKN-1-1h8aps2yszaiqmz2l3oc5392pgk8e49qhx2aj3nyv0ui0hez2a-8llk83c4wm9lwioey2s316r9l
                    Worker: >-
                      SWMTKN-1-1h8aps2yszaiqmz2l3oc5392pgk8e49qhx2aj3nyv0ui0hez2a-6qmn92w6bu3jdvnglku58u11a
                  Spec:
                    CAConfig:
                      NodeCertExpiry: 7776000000000000
                    Dispatcher:
                      HeartbeatPeriod: 5000000000
                    EncryptionConfig:
                      AutoLockManagers: false
                    Name: default
                    Orchestration:
                      TaskHistoryRetentionLimit: 10
                    Raft:
                      ElectionTick: 3
                      HeartbeatTick: 1
                      LogEntriesForSlowFollowers: 500
                      SnapshotInterval: 10000
                    TaskDefaults: {}
                  UpdatedAt: '2016-08-15T16:32:09.623207604Z'
                  Version:
                    Index: 51
            text/plain:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ClusterInfo'
                  - properties:
                      JoinTokens:
                        description: >-
                          The tokens workers and managers need to join the
                          swarm.
                        properties:
                          Manager:
                            description: The token managers can use to join the swarm.
                            type: string
                          Worker:
                            description: The token workers can use to join the swarm.
                            type: string
                        type: object
                    type: object
                example:
                  CreatedAt: '2016-08-15T16:00:20.349727406Z'
                  ID: 70ilmkj2f6sp2137c753w2nmt
                  JoinTokens:
                    Manager: >-
                      SWMTKN-1-1h8aps2yszaiqmz2l3oc5392pgk8e49qhx2aj3nyv0ui0hez2a-8llk83c4wm9lwioey2s316r9l
                    Worker: >-
                      SWMTKN-1-1h8aps2yszaiqmz2l3oc5392pgk8e49qhx2aj3nyv0ui0hez2a-6qmn92w6bu3jdvnglku58u11a
                  Spec:
                    CAConfig:
                      NodeCertExpiry: 7776000000000000
                    Dispatcher:
                      HeartbeatPeriod: 5000000000
                    EncryptionConfig:
                      AutoLockManagers: false
                    Name: default
                    Orchestration:
                      TaskHistoryRetentionLimit: 10
                    Raft:
                      ElectionTick: 3
                      HeartbeatTick: 1
                      LogEntriesForSlowFollowers: 500
                      SnapshotInterval: 10000
                    TaskDefaults: {}
                  UpdatedAt: '2016-08-15T16:32:09.623207604Z'
                  Version:
                    Index: 51
          description: no error
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      tags:
        - Swarm
      operationId: SwarmInspect
      summary: Inspect swarm
  /swarm/init:
    post:
      responses:
        '200':
          content:
            application/json:
              schema:
                description: The node ID
                example: 7v2t30z9blmxuhnyo6s4cpenp
                type: string
            text/plain:
              schema:
                description: The node ID
                example: 7v2t30z9blmxuhnyo6s4cpenp
                type: string
          description: no error
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: bad parameter
        '406':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: node is already part of a swarm
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      tags:
        - Swarm
      operationId: SwarmInit
      requestBody:
        content:
          application/json:
            schema:
              example:
                AdvertiseAddr: '192.168.1.1:2377'
                ForceNewCluster: false
                ListenAddr: '0.0.0.0:2377'
                Spec:
                  CAConfig: {}
                  Dispatcher: {}
                  EncryptionConfig:
                    AutoLockManagers: false
                  Orchestration: {}
                  Raft: {}
              properties:
                AdvertiseAddr:
                  description: >-
                    Externally reachable address advertised to other nodes. This
                    can either be an address/port combination in the form
                    `192.168.1.1:4567`, or an interface followed by a port
                    number, like `eth0:4567`. If the port number is omitted, the
                    port number from the listen address is used. If
                    `AdvertiseAddr` is not specified, it will be automatically
                    detected when possible.
                  type: string
                ForceNewCluster:
                  description: Force creation of a new swarm.
                  type: boolean
                ListenAddr:
                  description: >-
                    Listen address used for inter-manager communication, as well
                    as determining the networking interface used for the VXLAN
                    Tunnel Endpoint (VTEP). This can either be an address/port
                    combination in the form `192.168.1.1:4567`, or an interface
                    followed by a port number, like `eth0:4567`. If the port
                    number is omitted, the default swarm listening port is used.
                  type: string
                Spec:
                  $ref: '#/components/schemas/SwarmSpec'
              type: object
          text/plain:
            schema:
              example:
                AdvertiseAddr: '192.168.1.1:2377'
                ForceNewCluster: false
                ListenAddr: '0.0.0.0:2377'
                Spec:
                  CAConfig: {}
                  Dispatcher: {}
                  EncryptionConfig:
                    AutoLockManagers: false
                  Orchestration: {}
                  Raft: {}
              properties:
                AdvertiseAddr:
                  description: >-
                    Externally reachable address advertised to other nodes. This
                    can either be an address/port combination in the form
                    `192.168.1.1:4567`, or an interface followed by a port
                    number, like `eth0:4567`. If the port number is omitted, the
                    port number from the listen address is used. If
                    `AdvertiseAddr` is not specified, it will be automatically
                    detected when possible.
                  type: string
                ForceNewCluster:
                  description: Force creation of a new swarm.
                  type: boolean
                ListenAddr:
                  description: >-
                    Listen address used for inter-manager communication, as well
                    as determining the networking interface used for the VXLAN
                    Tunnel Endpoint (VTEP). This can either be an address/port
                    combination in the form `192.168.1.1:4567`, or an interface
                    followed by a port number, like `eth0:4567`. If the port
                    number is omitted, the default swarm listening port is used.
                  type: string
                Spec:
                  $ref: '#/components/schemas/SwarmSpec'
              type: object
        required: true
      summary: Initialize a new swarm
  /swarm/join:
    post:
      responses:
        '200':
          description: no error
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: bad parameter
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
        '503':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: node is already part of a swarm
      tags:
        - Swarm
      operationId: SwarmJoin
      requestBody:
        content:
          application/json:
            schema:
              example:
                AdvertiseAddr: '192.168.1.1:2377'
                JoinToken: >-
                  SWMTKN-1-3pu6hszjas19xyp7ghgosyx9k8atbfcr8p2is99znpy26u2lkl-7p73s1dx5in4tatdymyhg9hu2
                ListenAddr: '0.0.0.0:2377'
                RemoteAddrs:
                  - 'node1:2377'
              properties:
                AdvertiseAddr:
                  description: >-
                    Externally reachable address advertised to other nodes. This
                    can either be an address/port combination in the form
                    `192.168.1.1:4567`, or an interface followed by a port
                    number, like `eth0:4567`. If the port number is omitted, the
                    port number from the listen address is used. If
                    `AdvertiseAddr` is not specified, it will be automatically
                    detected when possible.
                  type: string
                JoinToken:
                  description: Secret token for joining this swarm.
                  type: string
                ListenAddr:
                  description: >-
                    Listen address used for inter-manager communication if the
                    node gets promoted to manager, as well as determining the
                    networking interface used for the VXLAN Tunnel Endpoint
                    (VTEP).
                  type: string
                RemoteAddrs:
                  description: >-
                    Addresses of manager nodes already participating in the
                    swarm.
                  type: string
              type: object
          text/plain:
            schema:
              example:
                AdvertiseAddr: '192.168.1.1:2377'
                JoinToken: >-
                  SWMTKN-1-3pu6hszjas19xyp7ghgosyx9k8atbfcr8p2is99znpy26u2lkl-7p73s1dx5in4tatdymyhg9hu2
                ListenAddr: '0.0.0.0:2377'
                RemoteAddrs:
                  - 'node1:2377'
              properties:
                AdvertiseAddr:
                  description: >-
                    Externally reachable address advertised to other nodes. This
                    can either be an address/port combination in the form
                    `192.168.1.1:4567`, or an interface followed by a port
                    number, like `eth0:4567`. If the port number is omitted, the
                    port number from the listen address is used. If
                    `AdvertiseAddr` is not specified, it will be automatically
                    detected when possible.
                  type: string
                JoinToken:
                  description: Secret token for joining this swarm.
                  type: string
                ListenAddr:
                  description: >-
                    Listen address used for inter-manager communication if the
                    node gets promoted to manager, as well as determining the
                    networking interface used for the VXLAN Tunnel Endpoint
                    (VTEP).
                  type: string
                RemoteAddrs:
                  description: >-
                    Addresses of manager nodes already participating in the
                    swarm.
                  type: string
              type: object
        required: true
      summary: Join an existing swarm
  /swarm/leave:
    post:
      parameters:
        - description: >-
            Force leave swarm, even if this is the last manager or that it will
            break the cluster.
          in: query
          name: force
          schema:
            default: false
            type: boolean
      responses:
        '200':
          description: no error
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
        '503':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: node is not part of a swarm
      tags:
        - Swarm
      operationId: SwarmLeave
      summary: Leave a swarm
  /swarm/unlock:
    post:
      responses:
        '200':
          description: no error
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      tags:
        - Swarm
      operationId: SwarmUnlock
      requestBody:
        content:
          application/json:
            schema:
              example:
                UnlockKey: SWMKEY-1-7c37Cc8654o6p38HnroywCi19pllOnGtbdZEgtKxZu8
              properties:
                UnlockKey:
                  description: The swarm's unlock key.
                  type: string
              type: object
          text/plain:
            schema:
              example:
                UnlockKey: SWMKEY-1-7c37Cc8654o6p38HnroywCi19pllOnGtbdZEgtKxZu8
              properties:
                UnlockKey:
                  description: The swarm's unlock key.
                  type: string
              type: object
        required: true
      summary: Unlock a locked manager
  /swarm/unlockkey:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                example:
                  UnlockKey: SWMKEY-1-7c37Cc8654o6p38HnroywCi19pllOnGtbdZEgtKxZu8
                properties:
                  UnlockKey:
                    description: The swarm's unlock key.
                    type: string
                type: object
            text/plain:
              schema:
                example:
                  UnlockKey: SWMKEY-1-7c37Cc8654o6p38HnroywCi19pllOnGtbdZEgtKxZu8
                properties:
                  UnlockKey:
                    description: The swarm's unlock key.
                    type: string
                type: object
          description: no error
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      tags:
        - Swarm
      operationId: SwarmUnlockkey
      summary: Get the unlock key
  /swarm/update:
    post:
      parameters:
        - description: >-
            The version number of the swarm object being updated. This is
            required to avoid conflicting writes.
          in: query
          name: version
          required: true
          schema:
            format: int64
            type: integer
        - description: Rotate the worker join token.
          in: query
          name: rotateWorkerToken
          schema:
            default: false
            type: boolean
        - description: Rotate the manager join token.
          in: query
          name: rotateManagerToken
          schema:
            default: false
            type: boolean
        - description: Rotate the manager unlock key.
          in: query
          name: rotateManagerUnlockKey
          schema:
            default: false
            type: boolean
      responses:
        '200':
          description: no error
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: bad parameter
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
        '503':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: node is not part of a swarm
      tags:
        - Swarm
      operationId: SwarmUpdate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SwarmSpec'
          text/plain:
            schema:
              $ref: '#/components/schemas/SwarmSpec'
        required: true
      summary: Update a swarm
  /system/df:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                example:
                  Containers:
                    - Command: top
                      Created: 1472592424
                      HostConfig:
                        NetworkMode: default
                      Id: >-
                        e575172ed11dc01bfce087fb27bee502db149e1a0fad7c296ad300bbff178148
                      Image: busybox
                      ImageID: >-
                        sha256:2b8fd9751c4c0f5dd266fcae00707e67a2545ef34f9a29354585f93dac906749
                      Labels: {}
                      Mounts: []
                      Names:
                        - /top
                      NetworkSettings:
                        Networks:
                          bridge:
                            EndpointID: >-
                              8ed5115aeaad9abb174f68dcf135b49f11daf597678315231a32ca28441dec6a
                            Gateway: 172.18.0.1
                            GlobalIPv6Address: ''
                            GlobalIPv6PrefixLen: 0
                            IPAddress: 172.18.0.2
                            IPPrefixLen: 16
                            IPv6Gateway: ''
                            MacAddress: '02:42:ac:12:00:02'
                            NetworkID: >-
                              d687bc59335f0e5c9ee8193e5612e8aee000c8c62ea170cfb99c098f95899d92
                      Ports: []
                      SizeRootFs: 1092588
                      State: exited
                      Status: Exited (0) 56 minutes ago
                  Images:
                    - Containers: 1
                      Created: 1466724217
                      Id: >-
                        sha256:2b8fd9751c4c0f5dd266fcae00707e67a2545ef34f9a29354585f93dac906749
                      Labels: {}
                      ParentId: ''
                      RepoDigests:
                        - >-
                          busybox@sha256:a59906e33509d14c036c8678d687bd4eec81ed7c4b8ce907b888c607f6a1e0e6
                      RepoTags:
                        - 'busybox:latest'
                      SharedSize: 0
                      Size: 1092588
                      VirtualSize: 1092588
                  LayersSize: 1092588
                  Volumes:
                    - Driver: local
                      Mountpoint: ''
                      Name: my-volume
                      Scope: ''
                      UsageData:
                        RefCount: 0
                        Size: 0
                properties:
                  Containers:
                    items:
                      $ref: '#/components/schemas/ContainerSummary'
                    type: array
                  Images:
                    items:
                      $ref: '#/components/schemas/ImageSummary'
                    type: array
                  LayersSize:
                    format: int64
                    type: integer
                  Volumes:
                    items:
                      $ref: '#/components/schemas/Volume'
                    type: array
                type: object
            text/plain:
              schema:
                example:
                  Containers:
                    - Command: top
                      Created: 1472592424
                      HostConfig:
                        NetworkMode: default
                      Id: >-
                        e575172ed11dc01bfce087fb27bee502db149e1a0fad7c296ad300bbff178148
                      Image: busybox
                      ImageID: >-
                        sha256:2b8fd9751c4c0f5dd266fcae00707e67a2545ef34f9a29354585f93dac906749
                      Labels: {}
                      Mounts: []
                      Names:
                        - /top
                      NetworkSettings:
                        Networks:
                          bridge:
                            EndpointID: >-
                              8ed5115aeaad9abb174f68dcf135b49f11daf597678315231a32ca28441dec6a
                            Gateway: 172.18.0.1
                            GlobalIPv6Address: ''
                            GlobalIPv6PrefixLen: 0
                            IPAddress: 172.18.0.2
                            IPPrefixLen: 16
                            IPv6Gateway: ''
                            MacAddress: '02:42:ac:12:00:02'
                            NetworkID: >-
                              d687bc59335f0e5c9ee8193e5612e8aee000c8c62ea170cfb99c098f95899d92
                      Ports: []
                      SizeRootFs: 1092588
                      State: exited
                      Status: Exited (0) 56 minutes ago
                  Images:
                    - Containers: 1
                      Created: 1466724217
                      Id: >-
                        sha256:2b8fd9751c4c0f5dd266fcae00707e67a2545ef34f9a29354585f93dac906749
                      Labels: {}
                      ParentId: ''
                      RepoDigests:
                        - >-
                          busybox@sha256:a59906e33509d14c036c8678d687bd4eec81ed7c4b8ce907b888c607f6a1e0e6
                      RepoTags:
                        - 'busybox:latest'
                      SharedSize: 0
                      Size: 1092588
                      VirtualSize: 1092588
                  LayersSize: 1092588
                  Volumes:
                    - Driver: local
                      Mountpoint: ''
                      Name: my-volume
                      Scope: ''
                      UsageData:
                        RefCount: 0
                        Size: 0
                properties:
                  Containers:
                    items:
                      $ref: '#/components/schemas/ContainerSummary'
                    type: array
                  Images:
                    items:
                      $ref: '#/components/schemas/ImageSummary'
                    type: array
                  LayersSize:
                    format: int64
                    type: integer
                  Volumes:
                    items:
                      $ref: '#/components/schemas/Volume'
                    type: array
                type: object
          description: no error
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      tags:
        - System
      operationId: SystemDataUsage
      summary: Get data usage information
  /tasks:
    get:
      parameters:
        - description: >
            A JSON encoded value of the filters (a `map[string][]string`) to
            process on the tasks list. Available filters:


            - `id=<task id>`

            - `name=<task name>`

            - `service=<service name>`

            - `node=<node id or name>`

            - `label=key` or `label="key=value"`

            - `desired-state=(running | shutdown | accepted)`
          in: query
          name: filters
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                example:
                  - CreatedAt: '2016-06-07T21:07:31.171892745Z'
                    DesiredState: running
                    ID: 0kzzo1i0y4jz6027t0k7aezc7
                    NetworksAttachments:
                      - Addresses:
                          - 10.255.0.10/16
                        Network:
                          CreatedAt: '2016-06-07T20:31:11.912919752Z'
                          DriverState:
                            Name: overlay
                            Options:
                              com.docker.network.driver.overlay.vxlanid_list: '256'
                          ID: 4qvuz4ko70xaltuqbt8956gd1
                          IPAMOptions:
                            Configs:
                              - Gateway: 10.255.0.1
                                Subnet: 10.255.0.0/16
                            Driver:
                              Name: default
                          Spec:
                            DriverConfiguration: {}
                            IPAMOptions:
                              Configs:
                                - Gateway: 10.255.0.1
                                  Subnet: 10.255.0.0/16
                              Driver: {}
                            Labels:
                              com.docker.swarm.internal: 'true'
                            Name: ingress
                          UpdatedAt: '2016-06-07T21:07:29.955277358Z'
                          Version:
                            Index: 18
                    NodeID: 60gvrl6tm78dmak4yl7srz94v
                    ServiceID: 9mnpnzenvg8p8tdbtq4wvbkcz
                    Slot: 1
                    Spec:
                      ContainerSpec:
                        Image: redis
                      Placement: {}
                      Resources:
                        Limits: {}
                        Reservations: {}
                      RestartPolicy:
                        Condition: any
                        MaxAttempts: 0
                    Status:
                      ContainerStatus:
                        ContainerID: >-
                          e5d62702a1b48d01c3e02ca1e0212a250801fa8d67caca0b6f35919ebc12f035
                        PID: 677
                      Message: started
                      State: running
                      Timestamp: '2016-06-07T21:07:31.290032978Z'
                    UpdatedAt: '2016-06-07T21:07:31.376370513Z'
                    Version:
                      Index: 71
                  - CreatedAt: '2016-06-07T21:07:30.019104782Z'
                    DesiredState: shutdown
                    ID: 1yljwbmlr8er2waf8orvqpwms
                    Name: hopeful_cori
                    NetworksAttachments:
                      - Addresses:
                          - 10.255.0.5/16
                        Network:
                          CreatedAt: '2016-06-07T20:31:11.912919752Z'
                          DriverState:
                            Name: overlay
                            Options:
                              com.docker.network.driver.overlay.vxlanid_list: '256'
                          ID: 4qvuz4ko70xaltuqbt8956gd1
                          IPAMOptions:
                            Configs:
                              - Gateway: 10.255.0.1
                                Subnet: 10.255.0.0/16
                            Driver:
                              Name: default
                          Spec:
                            DriverConfiguration: {}
                            IPAMOptions:
                              Configs:
                                - Gateway: 10.255.0.1
                                  Subnet: 10.255.0.0/16
                              Driver: {}
                            Labels:
                              com.docker.swarm.internal: 'true'
                            Name: ingress
                          UpdatedAt: '2016-06-07T21:07:29.955277358Z'
                          Version:
                            Index: 18
                    NodeID: 60gvrl6tm78dmak4yl7srz94v
                    ServiceID: 9mnpnzenvg8p8tdbtq4wvbkcz
                    Slot: 1
                    Spec:
                      ContainerSpec:
                        Image: redis
                      Placement: {}
                      Resources:
                        Limits: {}
                        Reservations: {}
                      RestartPolicy:
                        Condition: any
                        MaxAttempts: 0
                    Status:
                      ContainerStatus:
                        ContainerID: >-
                          1cf8d63d18e79668b0004a4be4c6ee58cddfad2dae29506d8781581d0688a213
                      Message: shutdown
                      State: shutdown
                      Timestamp: '2016-06-07T21:07:30.202183143Z'
                    UpdatedAt: '2016-06-07T21:07:30.231958098Z'
                    Version:
                      Index: 30
                items:
                  $ref: '#/components/schemas/Task'
                type: array
            text/plain:
              schema:
                example:
                  - CreatedAt: '2016-06-07T21:07:31.171892745Z'
                    DesiredState: running
                    ID: 0kzzo1i0y4jz6027t0k7aezc7
                    NetworksAttachments:
                      - Addresses:
                          - 10.255.0.10/16
                        Network:
                          CreatedAt: '2016-06-07T20:31:11.912919752Z'
                          DriverState:
                            Name: overlay
                            Options:
                              com.docker.network.driver.overlay.vxlanid_list: '256'
                          ID: 4qvuz4ko70xaltuqbt8956gd1
                          IPAMOptions:
                            Configs:
                              - Gateway: 10.255.0.1
                                Subnet: 10.255.0.0/16
                            Driver:
                              Name: default
                          Spec:
                            DriverConfiguration: {}
                            IPAMOptions:
                              Configs:
                                - Gateway: 10.255.0.1
                                  Subnet: 10.255.0.0/16
                              Driver: {}
                            Labels:
                              com.docker.swarm.internal: 'true'
                            Name: ingress
                          UpdatedAt: '2016-06-07T21:07:29.955277358Z'
                          Version:
                            Index: 18
                    NodeID: 60gvrl6tm78dmak4yl7srz94v
                    ServiceID: 9mnpnzenvg8p8tdbtq4wvbkcz
                    Slot: 1
                    Spec:
                      ContainerSpec:
                        Image: redis
                      Placement: {}
                      Resources:
                        Limits: {}
                        Reservations: {}
                      RestartPolicy:
                        Condition: any
                        MaxAttempts: 0
                    Status:
                      ContainerStatus:
                        ContainerID: >-
                          e5d62702a1b48d01c3e02ca1e0212a250801fa8d67caca0b6f35919ebc12f035
                        PID: 677
                      Message: started
                      State: running
                      Timestamp: '2016-06-07T21:07:31.290032978Z'
                    UpdatedAt: '2016-06-07T21:07:31.376370513Z'
                    Version:
                      Index: 71
                  - CreatedAt: '2016-06-07T21:07:30.019104782Z'
                    DesiredState: shutdown
                    ID: 1yljwbmlr8er2waf8orvqpwms
                    Name: hopeful_cori
                    NetworksAttachments:
                      - Addresses:
                          - 10.255.0.5/16
                        Network:
                          CreatedAt: '2016-06-07T20:31:11.912919752Z'
                          DriverState:
                            Name: overlay
                            Options:
                              com.docker.network.driver.overlay.vxlanid_list: '256'
                          ID: 4qvuz4ko70xaltuqbt8956gd1
                          IPAMOptions:
                            Configs:
                              - Gateway: 10.255.0.1
                                Subnet: 10.255.0.0/16
                            Driver:
                              Name: default
                          Spec:
                            DriverConfiguration: {}
                            IPAMOptions:
                              Configs:
                                - Gateway: 10.255.0.1
                                  Subnet: 10.255.0.0/16
                              Driver: {}
                            Labels:
                              com.docker.swarm.internal: 'true'
                            Name: ingress
                          UpdatedAt: '2016-06-07T21:07:29.955277358Z'
                          Version:
                            Index: 18
                    NodeID: 60gvrl6tm78dmak4yl7srz94v
                    ServiceID: 9mnpnzenvg8p8tdbtq4wvbkcz
                    Slot: 1
                    Spec:
                      ContainerSpec:
                        Image: redis
                      Placement: {}
                      Resources:
                        Limits: {}
                        Reservations: {}
                      RestartPolicy:
                        Condition: any
                        MaxAttempts: 0
                    Status:
                      ContainerStatus:
                        ContainerID: >-
                          1cf8d63d18e79668b0004a4be4c6ee58cddfad2dae29506d8781581d0688a213
                      Message: shutdown
                      State: shutdown
                      Timestamp: '2016-06-07T21:07:30.202183143Z'
                    UpdatedAt: '2016-06-07T21:07:30.231958098Z'
                    Version:
                      Index: 30
                items:
                  $ref: '#/components/schemas/Task'
                type: array
          description: no error
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      tags:
        - Task
      operationId: TaskList
      summary: List tasks
  '/tasks/{id}':
    get:
      parameters:
        - description: ID of the task
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
            text/plain:
              schema:
                $ref: '#/components/schemas/Task'
          description: no error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: no such task
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      tags:
        - Task
      operationId: TaskInspect
      summary: Inspect a task
  /version:
    get:
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    ApiVersion: '1.25'
                    Arch: amd64
                    BuildTime: '2016-06-14T07:09:13.444803460+00:00'
                    Experimental: true
                    GitCommit: deadbee
                    GoVersion: go1.6.3
                    KernelVersion: 3.19.0-23-generic
                    MinAPIVersion: '1.12'
                    Os: linux
                    Version: 1.13.0
              schema:
                properties:
                  ApiVersion:
                    type: string
                  Arch:
                    type: string
                  BuildTime:
                    type: string
                  Experimental:
                    type: boolean
                  GitCommit:
                    type: string
                  GoVersion:
                    type: string
                  KernelVersion:
                    type: string
                  MinAPIVersion:
                    type: string
                  Os:
                    type: string
                  Version:
                    type: string
                type: object
            text/plain:
              schema:
                properties:
                  ApiVersion:
                    type: string
                  Arch:
                    type: string
                  BuildTime:
                    type: string
                  Experimental:
                    type: boolean
                  GitCommit:
                    type: string
                  GoVersion:
                    type: string
                  KernelVersion:
                    type: string
                  MinAPIVersion:
                    type: string
                  Os:
                    type: string
                  Version:
                    type: string
                type: object
          description: no error
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      tags:
        - System
      description: >-
        Returns the version of Docker that is running and various information
        about the system that Docker is running on.
      operationId: SystemVersion
      summary: Get version
  /volumes:
    get:
      parameters:
        - description: |
            JSON encoded value of the filters (a `map[string][]string`) to
            process on the volumes list. Available filters:

            - `name=<volume-name>` Matches all or part of a volume name.
            - `dangling=<boolean>` When set to `true` (or `1`), returns all
               volumes that are not in use by a container. When set to `false`
               (or `0`), only volumes that are in use by one or more
               containers are returned.
            - `driver=<volume-driver-name>` Matches all or part of a volume
              driver name.
          in: query
          name: filters
          schema:
            format: json
            type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    Volumes:
                      - Driver: local
                        Labels:
                          com.example.some-label: some-value
                          com.example.some-other-label: some-other-value
                        Mountpoint: /var/lib/docker/volumes/tardis
                        Name: tardis
                        Options:
                          device: tmpfs
                          o: 'size=100m,uid=1000'
                          type: tmpfs
                        Scope: local
                    Warnings: []
              schema:
                properties:
                  Volumes:
                    description: List of volumes
                    items:
                      $ref: '#/components/schemas/Volume'
                    nullable: false
                    type: array
                  Warnings:
                    description: Warnings that occurred when fetching the list of volumes
                    items:
                      type: string
                    nullable: false
                    type: array
                required:
                  - Volumes
                  - Warnings
                type: object
            text/plain:
              schema:
                properties:
                  Volumes:
                    description: List of volumes
                    items:
                      $ref: '#/components/schemas/Volume'
                    nullable: false
                    type: array
                  Warnings:
                    description: Warnings that occurred when fetching the list of volumes
                    items:
                      type: string
                    nullable: false
                    type: array
                required:
                  - Volumes
                  - Warnings
                type: object
          description: Summary volume data that matches the query
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      tags:
        - Volume
      operationId: VolumeList
      summary: List volumes
  /volumes/create:
    post:
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Volume'
            text/plain:
              schema:
                $ref: '#/components/schemas/Volume'
          description: The volume was created successfully
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      tags:
        - Volume
      operationId: VolumeCreate
      requestBody:
        content:
          application/json:
            schema:
              example:
                Driver: custom
                Labels:
                  com.example.some-label: some-value
                  com.example.some-other-label: some-other-value
                Name: tardis
              properties:
                Driver:
                  default: local
                  description: Name of the volume driver to use.
                  nullable: false
                  type: string
                DriverOpts:
                  additionalProperties:
                    type: string
                  description: >-
                    A mapping of driver options and values. These options are
                    passed directly to the driver and are driver specific.
                  type: object
                Labels:
                  additionalProperties:
                    type: string
                  description: User-defined key/value metadata.
                  type: object
                Name:
                  description: >-
                    The new volume's name. If not specified, Docker generates a
                    name.
                  nullable: false
                  type: string
              type: object
          text/plain:
            schema:
              example:
                Driver: custom
                Labels:
                  com.example.some-label: some-value
                  com.example.some-other-label: some-other-value
                Name: tardis
              properties:
                Driver:
                  default: local
                  description: Name of the volume driver to use.
                  nullable: false
                  type: string
                DriverOpts:
                  additionalProperties:
                    type: string
                  description: >-
                    A mapping of driver options and values. These options are
                    passed directly to the driver and are driver specific.
                  type: object
                Labels:
                  additionalProperties:
                    type: string
                  description: User-defined key/value metadata.
                  type: object
                Name:
                  description: >-
                    The new volume's name. If not specified, Docker generates a
                    name.
                  nullable: false
                  type: string
              type: object
        description: Volume configuration
        required: true
      summary: Create a volume
  /volumes/prune:
    post:
      parameters:
        - description: >
            Filters to process on the prune list, encoded as JSON (a
            `map[string][]string`).


            Available filters:
          in: query
          name: filters
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  SpaceReclaimed:
                    description: Disk space reclaimed in bytes
                    format: int64
                    type: integer
                  VolumesDeleted:
                    description: Volumes that were deleted
                    items:
                      type: string
                    type: array
                type: object
            text/plain:
              schema:
                properties:
                  SpaceReclaimed:
                    description: Disk space reclaimed in bytes
                    format: int64
                    type: integer
                  VolumesDeleted:
                    description: Volumes that were deleted
                    items:
                      type: string
                    type: array
                type: object
          description: No error
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      tags:
        - Volume
      operationId: VolumePrune
      summary: Delete unused volumes
  '/volumes/{name}':
    delete:
      parameters:
        - description: Volume name or ID
          in: path
          name: name
          required: true
          schema:
            type: string
        - description: Force the removal of the volume
          in: query
          name: force
          schema:
            default: false
            type: boolean
      responses:
        '204':
          description: The volume was removed
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: No such volume or volume driver
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Volume is in use and cannot be removed
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      tags:
        - Volume
      description: Instruct the driver to remove the volume.
      operationId: VolumeDelete
      summary: Remove a volume
    get:
      parameters:
        - description: Volume name or ID
          in: path
          name: name
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Volume'
            text/plain:
              schema:
                $ref: '#/components/schemas/Volume'
          description: No error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: No such volume
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      tags:
        - Volume
      operationId: VolumeInspect
      summary: Inspect a volume
tags:
  - description: |
      Create and manage containers.
    name: Container
    x-displayName: Containers
  - name: Image
    x-displayName: Images
  - description: >
      Networks are user-defined networks that containers can be attached to. See
      the [networking
      documentation](https://docs.docker.com/engine/userguide/networking/) for
      more information.
    name: Network
    x-displayName: Networks
  - description: |
      Create and manage persistent storage that can be attached to containers.
    name: Volume
    x-displayName: Volumes
  - description: >
      Run new commands inside running containers. See the [command-line
      reference](https://docs.docker.com/engine/reference/commandline/exec/) for
      more information.


      To exec a command in a container, you first need to create an exec
      instance, then start it. These two API endpoints are wrapped up in a
      single command-line command, `docker exec`.
    name: Exec
    x-displayName: Exec
  - name: Secret
    x-displayName: Secrets
  - description: >
      Engines can be clustered together in a swarm. See [the swarm mode
      documentation](https://docs.docker.com/engine/swarm/) for more
      information.
    name: Swarm
    x-displayName: Swarm
  - description: >
      Nodes are instances of the Engine participating in a swarm. Swarm mode
      must be enabled for these endpoints to work.
    name: Node
    x-displayName: Nodes
  - description: >
      Services are the definitions of tasks to run on a swarm. Swarm mode must
      be enabled for these endpoints to work.
    name: Service
    x-displayName: Services
  - description: >
      A task is a container running on a swarm. It is the atomic scheduling unit
      of swarm. Swarm mode must be enabled for these endpoints to work.
    name: Task
    x-displayName: Tasks
  - name: Plugin
    x-displayName: Plugins
  - name: System
    x-displayName: System
components:
  schemas:
    AuthConfig:
      example:
        password: xxxx
        serveraddress: 'https://index.docker.io/v1/'
        username: hannibal
      properties:
        email:
          type: string
        password:
          type: string
        serveraddress:
          type: string
        username:
          type: string
      type: object
    BuildInfo:
      properties:
        error:
          type: string
        errorDetail:
          $ref: '#/components/schemas/ErrorDetail'
        id:
          type: string
        progress:
          type: string
        progressDetail:
          $ref: '#/components/schemas/ProgressDetail'
        status:
          type: string
        stream:
          type: string
      type: object
    ClusterInfo:
      properties:
        CreatedAt:
          format: dateTime
          type: string
        ID:
          description: The ID of the swarm.
          type: string
        Spec:
          $ref: '#/components/schemas/SwarmSpec'
        UpdatedAt:
          format: dateTime
          type: string
        Version:
          properties:
            Index:
              format: int64
              type: integer
          type: object
      type: object
    Config:
      description: Configuration for a container that is portable between hosts
      properties:
        ArgsEscaped:
          description: Command is already escaped (Windows only)
          type: boolean
        AttachStderr:
          default: true
          description: Whether to attach to `stderr`.
          type: boolean
        AttachStdin:
          default: false
          description: Whether to attach to `stdin`.
          type: boolean
        AttachStdout:
          default: true
          description: Whether to attach to `stdout`.
          type: boolean
        Cmd:
          description: Command to run specified as a string or an array of strings.
          oneOf:
            - items:
                type: string
              type: array
            - type: string
        Domainname:
          description: The domain name to use for the container.
          type: string
        Entrypoint:
          description: >
            The entry point for the container as a string or an array of
            strings.


            If the array consists of exactly one empty string (`[""]`) then the
            entry point is reset to system default (i.e., the entry point used
            by docker when there is no `ENTRYPOINT` instruction in the
            `Dockerfile`).
          oneOf:
            - items:
                type: string
              type: array
            - type: string
        Env:
          description: >
            A list of environment variables to set inside the container in the
            form `["VAR=value", ...]`
          items:
            type: string
          type: array
        ExposedPorts:
          additionalProperties:
            default: {}
            enum:
              - {}
            type: object
          description: |
            An object mapping ports to an empty object in the form:

            `{"<port>/<tcp|udp>": {}}`
          type: object
        Healthcheck:
          description: A test to perform to check that the container is healthy.
          properties:
            Interval:
              description: The time to wait between checks in nanoseconds. 0 means inherit.
              type: integer
            Retries:
              description: >-
                The number of consecutive failures needed to consider a
                container as unhealthy. 0 means inherit.
              type: integer
            Test:
              description: >
                The test to perform. Possible values are:


                - `{}` inherit healthcheck from image or parent image

                - `{"NONE"}` disable healthcheck

                - `{"CMD", args...}` exec arguments directly

                - `{"CMD-SHELL", command}` run command with system's default
                shell
              items:
                type: string
              type: array
            Timeout:
              description: >-
                The time to wait before considering the check to have hung. 0
                means inherit.
              type: integer
          type: object
        Hostname:
          description: 'The hostname to use for the container, as a valid RFC 1123 hostname.'
          type: string
        Image:
          description: The name of the image to use when creating the container
          type: string
        Labels:
          additionalProperties:
            type: string
          description: User-defined key/value metadata.
          type: object
        MacAddress:
          description: MAC address of the container.
          type: string
        NetworkDisabled:
          description: Disable networking for the container.
          type: boolean
        OnBuild:
          description: '`ONBUILD` metadata that were defined in the image''s `Dockerfile`.'
          items:
            type: string
          type: array
        OpenStdin:
          default: false
          description: Open `stdin`
          type: boolean
        Shell:
          description: 'Shell for when `RUN`, `CMD`, and `ENTRYPOINT` uses a shell.'
          items:
            type: string
          type: array
        StdinOnce:
          default: false
          description: Close `stdin` after one attached client disconnects
          type: boolean
        StopSignal:
          default: SIGTERM
          description: Signal to stop a container as a string or unsigned integer.
          type: string
        StopTimeout:
          default: 10
          description: Timeout to stop a container in seconds.
          type: integer
        Tty:
          default: false
          description: >-
            Attach standard streams to a TTY, including `stdin` if it is not
            closed.
          type: boolean
        User:
          description: The user that commands are run as inside the container.
          type: string
        Volumes:
          description: >-
            An object mapping mount point paths inside the container to empty
            objects.
          properties:
            additionalProperties:
              default: {}
              enum:
                - {}
              type: object
          type: object
        WorkingDir:
          description: The working directory for commands to run in.
          type: string
      type: object
    ContainerSummary:
      items:
        properties:
          Command:
            description: Command to run when starting the container
            type: string
          Created:
            description: When the container was created
            format: int64
            type: integer
          HostConfig:
            properties:
              NetworkMode:
                type: string
            type: object
          Id:
            description: The ID of this container
            type: string
            x-go-name: ID
          Image:
            description: The name of the image used when creating this container
            type: string
          ImageID:
            description: The ID of the image that this container was created from
            type: string
          Labels:
            additionalProperties:
              type: string
            description: User-defined key/value metadata.
            type: object
          Mounts:
            items:
              $ref: '#/components/schemas/Mount'
            type: array
          Names:
            description: The names that this container has been given
            items:
              type: string
            type: array
          NetworkSettings:
            description: A summary of the container's network settings
            properties:
              Networks:
                additionalProperties:
                  $ref: '#/components/schemas/EndpointSettings'
                type: object
            type: object
          Ports:
            description: The ports exposed by this container
            items:
              $ref: '#/components/schemas/Port'
            type: array
          SizeRootFs:
            description: The total size of all the files in this container
            format: int64
            type: integer
          SizeRw:
            description: >-
              The size of files that have been created or changed by this
              container
            format: int64
            type: integer
          State:
            description: The state of this container (e.g. `Exited`)
            type: string
          Status:
            description: Additional human-readable status of this container (e.g. `Exit 0`)
            type: string
        type: object
      type: array
    CreateImageInfo:
      properties:
        error:
          type: string
        progress:
          type: string
        progressDetail:
          $ref: '#/components/schemas/ProgressDetail'
        status:
          type: string
      type: object
    DeviceMapping:
      description: A device mapping between the host and container
      example:
        CgroupPermissions: mrw
        PathInContainer: /dev/deviceName
        PathOnHost: /dev/deviceName
      properties:
        CgroupPermissions:
          type: string
        PathInContainer:
          type: string
        PathOnHost:
          type: string
      type: object
    EndpointPortConfig:
      properties:
        Name:
          type: string
        Protocol:
          enum:
            - tcp
            - udp
          type: string
        PublishedPort:
          description: The port on the swarm hosts.
          type: integer
        TargetPort:
          description: The port inside the container.
          type: integer
      type: object
    EndpointSettings:
      description: Configuration for a network endpoint.
      properties:
        Aliases:
          items:
            type: string
          type: array
        EndpointID:
          type: string
        Gateway:
          type: string
        GlobalIPv6Address:
          type: string
        GlobalIPv6PrefixLen:
          format: int64
          type: integer
        IPAMConfig:
          description: IPAM configurations for the endpoint
          properties:
            IPv4Address:
              type: string
            IPv6Address:
              type: string
            LinkLocalIPs:
              items:
                type: string
              type: array
          type: object
        IPAddress:
          type: string
        IPPrefixLen:
          type: integer
        IPv6Gateway:
          type: string
        Links:
          items:
            type: string
          type: array
        MacAddress:
          type: string
        NetworkID:
          type: string
      type: object
    EndpointSpec:
      description: Properties that can be configured to access and load balance a service.
      properties:
        Mode:
          default: vip
          description: >-
            The mode of resolution to use for internal load balancing between
            tasks.
          enum:
            - vip
            - dnsrr
          type: string
        Ports:
          description: >-
            List of exposed ports that this service is accessible on from the
            outside. Ports can only be provided if `vip` resolution mode is
            used.
          items:
            $ref: '#/components/schemas/EndpointPortConfig'
          type: array
      type: object
    ErrorDetail:
      properties:
        code:
          type: integer
        message:
          type: string
      type: object
    ErrorResponse:
      description: Represents an error.
      example:
        message: Something went wrong.
      properties:
        message:
          description: The error message.
          nullable: false
          type: string
      required:
        - message
      type: object
    GraphDriver:
      description: Information about this container's graph driver.
      properties:
        Data:
          additionalProperties:
            type: string
          type: object
        Name:
          type: string
      type: object
    HostConfig:
      allOf:
        - $ref: '#/components/schemas/Resources'
        - properties:
            AutoRemove:
              description: >-
                Automatically remove the container when the container's process
                exits. This has no effect if `RestartPolicy` is set.
              type: boolean
            Binds:
              description: >
                A list of volume bindings for this container. Each volume
                binding is a string in one of these forms:


                - `host-src:container-dest` to bind-mount a host path into the
                container. Both `host-src`, and `container-dest` must be an
                _absolute_ path.

                - `host-src:container-dest:ro` to make the bind-mount read-only
                inside the container. Both `host-src`, and `container-dest` must
                be an _absolute_ path.

                - `volume-name:container-dest` to bind-mount a volume managed by
                a volume driver into the container. `container-dest` must be an
                _absolute_ path.

                - `volume-name:container-dest:ro` to mount the volume read-only
                inside the container.  `container-dest` must be an _absolute_
                path.
              items:
                type: string
              type: array
            CapAdd:
              description: A list of kernel capabilities to add to the container.
              items:
                type: string
              type: array
            CapDrop:
              description: A list of kernel capabilities to drop from the container.
              items:
                type: string
              type: array
            Cgroup:
              description: Cgroup to use for the container.
              type: string
            ConsoleSize:
              description: >-
                Initial console size, as an `[height, width]` array. (Windows
                only)
              items:
                minimum: 0
                type: integer
              maxItems: 2
              minItems: 2
              type: array
            ContainerIDFile:
              description: Path to a file where the container ID is written
              type: string
            Dns:
              description: A list of DNS servers for the container to use.
              items:
                type: string
              type: array
            DnsOptions:
              description: A list of DNS options.
              items:
                type: string
              type: array
            DnsSearch:
              description: A list of DNS search domains.
              items:
                type: string
              type: array
            ExtraHosts:
              description: >
                A list of hostnames/IP mappings to add to the container's
                `/etc/hosts` file. Specified in the form `["hostname:IP"]`.
              items:
                type: string
              type: array
            GroupAdd:
              description: >-
                A list of additional groups that the container process will run
                as.
              items:
                type: string
              type: array
            IpcMode:
              description: IPC namespace to use for the container.
              type: string
            Isolation:
              description: Isolation technology of the container. (Windows only)
              enum:
                - default
                - process
                - hyperv
              type: string
            Links:
              description: >-
                A list of links for the container in the form
                `container_name:alias`.
              items:
                type: string
              type: array
            LogConfig:
              description: The logging configuration for this container
              properties:
                Config:
                  additionalProperties:
                    type: string
                  type: object
                Type:
                  enum:
                    - json-file
                    - syslog
                    - journald
                    - gelf
                    - fluentd
                    - awslogs
                    - splunk
                    - etwlogs
                    - none
                  type: string
              type: object
            Mounts:
              description: Specification for mounts to be added to the container.
              items:
                $ref: '#/components/schemas/Mount'
              type: array
            NetworkMode:
              description: >-
                Network mode to use for this container. Supported standard
                values are: `bridge`, `host`, `none`, and `container:<name|id>`.
                Any other value is taken as a custom network's name to which
                this container should connect to.
              type: string
            OomScoreAdj:
              description: >-
                An integer value containing the score given to the container in
                order to tune OOM killer preferences.
              type: integer
            PidMode:
              description: >
                Set the PID (Process) Namespace mode for the container. It can
                be either:


                - `"container:<name|id>"`: joins another container's PID
                namespace

                - `"host"`: use the host's PID namespace inside the container
              type: string
            PortBindings:
              additionalProperties:
                properties:
                  HostIp:
                    description: The host IP address
                    type: string
                  HostPort:
                    description: 'The host port number, as a string'
                    type: string
                type: object
              description: >-
                A map of exposed container ports and the host port they should
                map to.
              type: object
            Privileged:
              description: Gives the container full access to the host.
              type: boolean
            PublishAllPorts:
              description: >-
                Allocates a random host port for all of a container's exposed
                ports.
              type: boolean
            ReadonlyRootfs:
              description: Mount the container's root filesystem as read only.
              type: boolean
            RestartPolicy:
              $ref: '#/components/schemas/RestartPolicy'
            Runtime:
              description: Runtime to use with this container.
              type: string
            SecurityOpt:
              description: >-
                A list of string values to customize labels for MLS systems,
                such as SELinux.
              items:
                type: string
              type: array
            ShmSize:
              description: 'Size of `/dev/shm` in bytes. If omitted, the system uses 64MB.'
              minimum: 0
              type: integer
            StorageOpt:
              additionalProperties:
                type: string
              description: >
                Storage driver options for this container, in the form `{"size":
                "120G"}`.
              type: object
            Sysctls:
              additionalProperties:
                type: string
              description: >
                A list of kernel parameters (sysctls) to set in the container.
                For example: `{"net.ipv4.ip_forward": "1"}`
              type: object
            Tmpfs:
              additionalProperties:
                type: string
              description: >
                A map of container directories which should be replaced by tmpfs
                mounts, and their corresponding mount options. For example: `{
                "/run": "rw,noexec,nosuid,size=65536k" }`.
              type: object
            UTSMode:
              description: UTS namespace to use for the container.
              type: string
            UsernsMode:
              description: >-
                Sets the usernamespace mode for the container when usernamespace
                remapping option is enabled.
              type: string
            VolumeDriver:
              description: Driver that this container uses to mount volumes.
              type: string
            VolumesFrom:
              description: >-
                A list of volumes to inherit from another container, specified
                in the form `<container name>[:<ro|rw>]`.
              items:
                type: string
              type: array
          type: object
      description: Container configuration that depends on the host we are running on
    IPAM:
      properties:
        Config:
          description: >-
            List of IPAM configuration options, specified as a map: `{"Subnet":
            <CIDR>, "IPRange": <CIDR>, "Gateway": <IP address>, "AuxAddress":
            <device_name:IP address>}`
          items:
            additionalProperties:
              type: string
            type: object
          type: array
        Driver:
          default: default
          description: Name of the IPAM driver to use.
          type: string
        Options:
          description: 'Driver-specific options, specified as a map.'
          items:
            additionalProperties:
              type: string
            type: object
          type: array
      type: object
    IdResponse:
      description: Response to an API call that returns just an Id
      properties:
        Id:
          description: The id of the newly created object.
          nullable: false
          type: string
      required:
        - Id
      type: object
    Image:
      properties:
        Architecture:
          type: string
        Author:
          type: string
        Comment:
          type: string
        Config:
          $ref: '#/components/schemas/Config'
        Container:
          type: string
        ContainerConfig:
          $ref: '#/components/schemas/Config'
        Created:
          type: string
        DockerVersion:
          type: string
        GraphDriver:
          $ref: '#/components/schemas/GraphDriver'
        Id:
          type: string
        Os:
          type: string
        Parent:
          type: string
        RepoDigests:
          items:
            type: string
          type: array
        RepoTags:
          items:
            type: string
          type: array
        RootFS:
          properties:
            BaseLayer:
              type: string
            Layers:
              items:
                type: string
              type: array
            Type:
              type: string
          type: object
        Size:
          format: int64
          type: integer
        VirtualSize:
          format: int64
          type: integer
      type: object
    ImageDeleteResponse:
      properties:
        Deleted:
          description: The image ID of an image that was deleted
          type: string
        Untagged:
          description: The image ID of an image that was untagged
          type: string
      type: object
    ImageSummary:
      properties:
        Containers:
          nullable: false
          type: integer
        Created:
          nullable: false
          type: integer
        Id:
          nullable: false
          type: string
        Labels:
          additionalProperties:
            type: string
          nullable: false
          type: object
        ParentId:
          nullable: false
          type: string
        RepoDigests:
          items:
            type: string
          nullable: false
          type: array
        RepoTags:
          items:
            type: string
          nullable: false
          type: array
        SharedSize:
          nullable: false
          type: integer
        Size:
          nullable: false
          type: integer
        VirtualSize:
          nullable: false
          type: integer
      required:
        - Id
        - ParentId
        - RepoTags
        - RepoDigests
        - Created
        - Size
        - SharedSize
        - VirtualSize
        - Labels
        - Containers
      type: object
    Mount:
      properties:
        BindOptions:
          description: Optional configuration for the `bind` type.
          properties:
            Propagation:
              description: >-
                A propagation mode with the value `[r]private`, `[r]shared`, or
                `[r]slave`.
              enum:
                - private
                - rprivate
                - shared
                - rshared
                - slave
                - rslave
          type: object
        ReadOnly:
          description: Whether the mount should be read-only.
          type: boolean
        Source:
          description: 'Mount source (e.g. a volume name, a host path).'
        Target:
          description: Container path.
          type: string
        TmpfsOptions:
          description: Optional configuration for the `tmpfs` type.
          properties:
            Mode:
              description: The permission mode for the tmpfs mount in an integer.
              type: integer
            SizeBytes:
              description: The size for the tmpfs mount in bytes.
              format: int64
              type: integer
          type: object
        Type:
          description: >
            The mount type. Available types:


            - `bind` Mounts a file or directory from the host into the
            container. Must exist prior to creating the container.

            - `volume` Creates a volume with the given name and options (or uses
            a pre-existing volume with the same name and options). These are
            **not** removed when the container is removed.

            - `tmpfs` Create a tmpfs with the given options. The mount source
            cannot be specified for tmpfs.
          enum:
            - bind
            - volume
            - tmpfs
          type: string
        VolumeOptions:
          description: Optional configuration for the `volume` type.
          properties:
            DriverConfig:
              description: Map of driver specific options
              properties:
                Name:
                  description: Name of the driver to use to create the volume.
                  type: string
                Options:
                  additionalProperties:
                    type: string
                  description: key/value map of driver specific options.
                  type: object
              type: object
            Labels:
              additionalProperties:
                type: string
              description: User-defined key/value metadata.
              type: object
            NoCopy:
              default: false
              description: Populate volume with data from the target.
              type: boolean
          type: object
      type: object
    MountPoint:
      description: A mount point inside a container
      properties:
        Destination:
          type: string
        Driver:
          type: string
        Mode:
          type: string
        Name:
          type: string
        Propagation:
          type: string
        RW:
          type: boolean
        Source:
          type: string
        Type:
          type: string
      type: object
    Network:
      example:
        Containers:
          19a4d5d687db25203351ed79d478946f861258f018fe384f229f2efa4b23513c:
            EndpointID: 628cadb8bcb92de107b2a1e516cbffe463e321f548feb37697cce00ad694f21a
            IPv4Address: 172.19.0.2/16
            IPv6Address: ''
            MacAddress: '02:42:ac:13:00:02'
            Name: test
        Created: '2016-10-19T04:33:30.360899459Z'
        Driver: bridge
        EnableIPv6: false
        IPAM:
          Config:
            - Gateway: 172.19.0.1
              Subnet: 172.19.0.0/16
          Driver: default
          Options:
            foo: bar
        Id: 7d86d31b1478e7cca9ebed7e73aa0fdeec46c5ca29497431d3007d2d9e15ed99
        Internal: false
        Labels:
          com.example.some-label: some-value
          com.example.some-other-label: some-other-value
        Name: net01
        Options:
          com.docker.network.bridge.default_bridge: 'true'
          com.docker.network.bridge.enable_icc: 'true'
          com.docker.network.bridge.enable_ip_masquerade: 'true'
          com.docker.network.bridge.host_binding_ipv4: 0.0.0.0
          com.docker.network.bridge.name: docker0
          com.docker.network.driver.mtu: '1500'
        Scope: local
      properties:
        Containers:
          additionalProperties:
            $ref: '#/components/schemas/NetworkContainer'
          type: object
        Created:
          format: dateTime
          type: string
        Driver:
          type: string
        EnableIPv6:
          type: boolean
        IPAM:
          $ref: '#/components/schemas/IPAM'
        Id:
          type: string
        Internal:
          type: boolean
        Labels:
          additionalProperties:
            type: string
          type: object
        Name:
          type: string
        Options:
          additionalProperties:
            type: string
          type: object
        Scope:
          type: string
      type: object
    NetworkConfig:
      description: 'TODO: check is correct'
      properties:
        Address:
          type: string
        Bridge:
          type: string
        Gateway:
          type: string
        IPPrefixLen:
          type: integer
        MacAddress:
          type: string
        PortMapping:
          type: string
        Ports:
          items:
            $ref: '#/components/schemas/Port'
          type: array
      type: object
    NetworkContainer:
      properties:
        EndpointID:
          type: string
        IPv4Address:
          type: string
        IPv6Address:
          type: string
        MacAddress:
          type: string
      type: object
    Node:
      example:
        CreatedAt: '2016-06-07T20:31:11.853781916Z'
        Description:
          Engine:
            EngineVersion: 1.13.0
            Labels:
              foo: bar
            Plugins:
              - Name: local
                Type: Volume
              - Name: bridge
                Type: Network
              - Name: 'null'
                Type: Network
              - Name: overlay
                Type: Network
          Hostname: bf3067039e47
          Platform:
            Architecture: x86_64
            OS: linux
          Resources:
            MemoryBytes: 8272408576
            NanoCPUs: 4000000000
        ID: 24ifsmvkjbyhk
        ManagerStatus:
          Addr: '172.17.0.2:2377'
          Leader: true
          Reachability: reachable
        Spec:
          Availability: active
          Labels:
            foo: bar
          Name: my-node
          Role: manager
        Status:
          Addr: 172.17.0.2
          State: ready
        UpdatedAt: '2016-06-07T20:31:11.999868824Z'
        Version:
          Index: 8
      properties:
        CreatedAt:
          format: dateTime
          type: string
        Description:
          properties:
            Engine:
              properties:
                EngineVersion:
                  type: string
                Labels:
                  additionalProperties:
                    type: string
                  type: object
                Plugins:
                  items:
                    properties:
                      Name:
                        type: string
                      Type:
                        type: string
                    type: object
                  type: array
              type: object
            Hostname:
              type: string
            Platform:
              properties:
                Architecture:
                  type: string
                OS:
                  type: string
              type: object
            Resources:
              properties:
                MemoryBytes:
                  format: int64
                  type: integer
                NanoCPUs:
                  format: int64
                  type: integer
              type: object
          type: object
        ID:
          type: string
        Spec:
          $ref: '#/components/schemas/NodeSpec'
        UpdatedAt:
          format: dateTime
          type: string
        Version:
          properties:
            Index:
              format: int64
              type: integer
          type: object
      type: object
    NodeSpec:
      example:
        Availability: active
        Labels:
          foo: bar
        Name: node-name
        Role: manager
      properties:
        Availability:
          description: Availability of the node.
          enum:
            - active
            - pause
            - drain
          type: string
        Labels:
          additionalProperties:
            type: string
          description: User-defined key/value metadata.
          type: object
        Name:
          description: Name for the node.
          type: string
        Role:
          description: Role of the node.
          enum:
            - worker
            - manager
          type: string
      type: object
    Plugin:
      description: A plugin for the Engine API
      example:
        Active: true
        Config:
          Args:
            Description: command line arguments
            Name: args
            Value: []
          Description: A sample volume plugin for Docker
          Documentation: 'https://docs.docker.com/engine/extend/plugins/'
          Entrypoint:
            - /usr/bin/sample-volume-plugin
            - /data
          Env:
            - Description: 'If set, prints debug messages'
              Name: DEBUG
              Value: '0'
          Interface:
            Socket: plugins.sock
            Types:
              - docker.volumedriver/1.0
          Linux:
            AllowAllDevices: false
          Network:
            Type: ''
          PropagatedMount: /data
          User: {}
          WorkDir: ''
        Id: 5724e2c8652da337ab2eedd19fc6fc0ec908e4bd907c7421bf6a8dfc70c4c078
        Name: tiborvass/sample-volume-plugin
        Settings:
          Env:
            - DEBUG=0
        Tag: latest
      properties:
        Config:
          description: The config of a plugin.
          nullable: false
          properties:
            Args:
              nullable: false
              properties:
                Description:
                  nullable: false
                  type: string
                Name:
                  nullable: false
                  type: string
                Settable:
                  items:
                    type: string
                  type: array
                Value:
                  items:
                    type: string
                  type: array
              required:
                - Name
                - Description
                - Settable
                - Value
              type: object
            Description:
              nullable: false
              type: string
            Documentation:
              nullable: false
              type: string
            Entrypoint:
              items:
                type: string
              type: array
            Env:
              items:
                $ref: '#/components/schemas/PluginEnv'
              type: array
            Interface:
              description: The interface between Docker and the plugin
              nullable: false
              properties:
                Socket:
                  nullable: false
                  type: string
                Types:
                  items:
                    $ref: '#/components/schemas/PluginInterfaceType'
                  type: array
              required:
                - Types
                - Socket
              type: object
            Linux:
              nullable: false
              properties:
                AllowAllDevices:
                  nullable: false
                  type: boolean
                Capabilities:
                  items:
                    type: string
                  type: array
                Devices:
                  items:
                    $ref: '#/components/schemas/PluginDevice'
                  type: array
              required:
                - Capabilities
                - AllowAllDevices
                - Devices
              type: object
            Mounts:
              items:
                $ref: '#/components/schemas/PluginMount'
              type: array
            Network:
              nullable: false
              properties:
                Type:
                  nullable: false
                  type: string
              required:
                - Type
              type: object
            PropagatedMount:
              nullable: false
              type: string
            User:
              nullable: false
              properties:
                GID:
                  format: uint32
                  type: integer
                UID:
                  format: uint32
                  type: integer
              type: object
            WorkDir:
              nullable: false
              type: string
            rootfs:
              properties:
                diff_ids:
                  items:
                    type: string
                  type: array
                type:
                  type: string
              type: object
          required:
            - Description
            - Documentation
            - Interface
            - Entrypoint
            - WorkDir
            - Network
            - Linux
            - PropagatedMount
            - Mounts
            - Env
            - Args
          type: object
        Enabled:
          description: >-
            True when the plugin is running. False when the plugin is not
            running, only installed.
          nullable: false
          type: boolean
        Id:
          type: string
        Name:
          nullable: false
          type: string
        Settings:
          description: Settings that can be modified by users.
          nullable: false
          properties:
            Args:
              items:
                type: string
              type: array
            Devices:
              items:
                $ref: '#/components/schemas/PluginDevice'
              type: array
            Env:
              items:
                type: string
              type: array
            Mounts:
              items:
                $ref: '#/components/schemas/PluginMount'
              type: array
          required:
            - Args
            - Devices
            - Env
            - Mounts
          type: object
      required:
        - Settings
        - Enabled
        - Config
        - Name
      type: object
    PluginDevice:
      nullable: false
      properties:
        Description:
          nullable: false
          type: string
        Name:
          nullable: false
          type: string
        Path:
          type: string
        Settable:
          items:
            type: string
          type: array
      required:
        - Name
        - Description
        - Settable
        - Path
      type: object
    PluginEnv:
      nullable: false
      properties:
        Description:
          nullable: false
          type: string
        Name:
          nullable: false
          type: string
        Settable:
          items:
            type: string
          type: array
        Value:
          type: string
      required:
        - Name
        - Description
        - Settable
        - Value
      type: object
    PluginInterfaceType:
      nullable: false
      properties:
        Capability:
          nullable: false
          type: string
        Prefix:
          nullable: false
          type: string
        Version:
          nullable: false
          type: string
      required:
        - Prefix
        - Capability
        - Version
      type: object
    PluginMount:
      nullable: false
      properties:
        Description:
          nullable: false
          type: string
        Destination:
          nullable: false
          type: string
        Name:
          nullable: false
          type: string
        Options:
          items:
            type: string
          type: array
        Settable:
          items:
            type: string
          type: array
        Source:
          type: string
        Type:
          nullable: false
          type: string
      required:
        - Name
        - Description
        - Settable
        - Source
        - Destination
        - Type
        - Options
      type: object
    Port:
      description: An open port on a container
      example:
        PrivatePort: 8080
        PublicPort: 80
        Type: tcp
      properties:
        IP:
          format: ip-address
          type: string
        PrivatePort:
          description: Port on the container
          format: uint16
          nullable: false
          type: integer
        PublicPort:
          description: Port exposed on the host
          format: uint16
          type: integer
        Type:
          enum:
            - tcp
            - udp
          nullable: false
          type: string
      required:
        - PrivatePort
        - Type
      type: object
    ProcessConfig:
      properties:
        arguments:
          items:
            type: string
          type: array
        entrypoint:
          type: string
        privileged:
          type: boolean
        tty:
          type: boolean
        user:
          type: string
      type: object
    ProgressDetail:
      properties:
        code:
          type: integer
        message:
          type: integer
      type: object
    PushImageInfo:
      properties:
        error:
          type: string
        progress:
          type: string
        progressDetail:
          $ref: '#/components/schemas/ProgressDetail'
        status:
          type: string
      type: object
    Resources:
      description: 'A container''s resources (cgroups config, ulimits, etc)'
      properties:
        BlkioDeviceReadBps:
          description: >
            Limit read rate (bytes per second) from a device, in the form
            `[{"Path": "device_path", "Rate": rate}]`.
          items:
            $ref: '#/components/schemas/ThrottleDevice'
          type: array
        BlkioDeviceReadIOps:
          description: >
            Limit read rate (IO per second) from a device, in the form
            `[{"Path": "device_path", "Rate": rate}]`.
          items:
            $ref: '#/components/schemas/ThrottleDevice'
          type: array
        BlkioDeviceWriteBps:
          description: >
            Limit write rate (bytes per second) to a device, in the form
            `[{"Path": "device_path", "Rate": rate}]`.
          items:
            $ref: '#/components/schemas/ThrottleDevice'
          type: array
        BlkioDeviceWriteIOps:
          description: >
            Limit write rate (IO per second) to a device, in the form `[{"Path":
            "device_path", "Rate": rate}]`.
          items:
            $ref: '#/components/schemas/ThrottleDevice'
          type: array
        BlkioWeight:
          description: Block IO weight (relative weight).
          maximum: 1000
          minimum: 0
          type: integer
        BlkioWeightDevice:
          description: >
            Block IO weight (relative device weight) in the form `[{"Path":
            "device_path", "Weight": weight}]`.
          items:
            properties:
              Path:
                type: string
              Weight:
                minimum: 0
                type: integer
            type: object
          type: array
        CgroupParent:
          description: >-
            Path to `cgroups` under which the container's `cgroup` is created.
            If the path is not absolute, the path is considered to be relative
            to the `cgroups` path of the init process. Cgroups are created if
            they do not already exist.
          type: string
        CpuCount:
          description: >
            The number of usable CPUs (Windows only).


            On Windows Server containers, the processor resource controls are
            mutually exclusive. The order of precedence is `CPUCount` first,
            then `CPUShares`, and `CPUPercent` last.
          format: int64
          type: integer
        CpuPercent:
          description: >
            The usable percentage of the available CPUs (Windows only).


            On Windows Server containers, the processor resource controls are
            mutually exclusive. The order of precedence is `CPUCount` first,
            then `CPUShares`, and `CPUPercent` last.
          format: int64
          type: integer
        CpuPeriod:
          description: The length of a CPU period in microseconds.
          format: int64
          type: integer
        CpuQuota:
          description: Microseconds of CPU time that the container can get in a CPU period.
          format: int64
          type: integer
        CpuRealtimePeriod:
          description: >-
            The length of a CPU real-time period in microseconds. Set to 0 to
            allocate no time allocated to real-time tasks.
          format: int64
          type: integer
        CpuRealtimeRuntime:
          description: >-
            The length of a CPU real-time runtime in microseconds. Set to 0 to
            allocate no time allocated to real-time tasks.
          format: int64
          type: integer
        CpuShares:
          description: >-
            An integer value representing this container's relative CPU weight
            versus other containers.
          type: integer
        CpusetCpus:
          description: 'CPUs in which to allow execution (e.g., `0-3`, `0,1`)'
          type: string
        CpusetMems:
          description: >-
            Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only
            effective on NUMA systems.
          type: string
        Devices:
          description: A list of devices to add to the container.
          items:
            $ref: '#/components/schemas/DeviceMapping'
          type: array
        DiskQuota:
          description: Disk limit (in bytes).
          format: int64
          type: integer
        IOMaximumBandwidth:
          description: >-
            Maximum IO in bytes per second for the container system drive
            (Windows only)
          format: int64
          type: integer
        IOMaximumIOps:
          description: Maximum IOps for the container system drive (Windows only)
          format: int64
          type: integer
        KernelMemory:
          description: Kernel memory limit in bytes.
          format: int64
          type: integer
        Memory:
          default: 0
          description: Memory limit in bytes.
          type: integer
        MemoryReservation:
          description: Memory soft limit in bytes.
          format: int64
          type: integer
        MemorySwap:
          description: >-
            Total memory limit (memory + swap). Set as `-1` to enable unlimited
            swap.
          format: int64
          type: integer
        MemorySwappiness:
          description: >-
            Tune a container's memory swappiness behavior. Accepts an integer
            between 0 and 100.
          format: int64
          maximum: 100
          minimum: 0
          type: integer
        NanoCPUs:
          description: CPU quota in units of 10<sup>-9</sup> CPUs.
          format: int64
          type: integer
        OomKillDisable:
          description: Disable OOM Killer for the container.
          type: boolean
        PidsLimit:
          description: Tune a container's pids limit. Set -1 for unlimited.
          format: int64
          type: integer
        Ulimits:
          description: >
            A list of resource limits to set in the container. For example:
            `{"Name": "nofile", "Soft": 1024, "Hard": 2048}`"
          items:
            properties:
              Hard:
                description: Hard limit
                type: integer
              Name:
                description: Name of ulimit
                type: string
              Soft:
                description: Soft limit
                type: integer
            type: object
          type: array
      type: object
    RestartPolicy:
      default: {}
      description: >
        The behavior to apply when the container exits. The default is not to
        restart.


        An ever increasing delay (double the previous delay, starting at 100ms)
        is added before each restart to prevent flooding the server.
      properties:
        MaximumRetryCount:
          description: >-
            If `on-failure` is used, the number of times to retry before giving
            up
          type: integer
        Name:
          description: >
            - `always` Always restart

            - `unless-stopped` Restart always except when the user has manually
            stopped the container

            - `on-failure` Restart only when the container exit code is non-zero
          enum:
            - always
            - unless-stopped
            - on-failure
          type: string
      type: object
    Secret:
      properties:
        CreatedAt:
          format: dateTime
          type: string
        ID:
          type: string
        Spec:
          $ref: '#/components/schemas/ServiceSpec'
        UpdatedAt:
          format: dateTime
          type: string
        Version:
          properties:
            Index:
              format: int64
              type: integer
          type: object
      type: object
    SecretSpec:
      properties:
        Data:
          description: Base64-url-safe-encoded secret data
          items:
            type: string
          type: array
        Labels:
          additionalProperties:
            type: string
          description: User-defined key/value metadata.
          type: object
        Name:
          description: User-defined name of the secret.
          type: string
      type: object
    Service:
      example:
        CreatedAt: '2016-06-07T21:05:51.880065305Z'
        Endpoint:
          Ports:
            - Protocol: tcp
              PublishedPort: 30001
              TargetPort: 6379
          Spec:
            Mode: vip
            Ports:
              - Protocol: tcp
                PublishedPort: 30001
                TargetPort: 6379
          VirtualIPs:
            - Addr: 10.255.0.2/16
              NetworkID: 4qvuz4ko70xaltuqbt8956gd1
            - Addr: 10.255.0.3/16
              NetworkID: 4qvuz4ko70xaltuqbt8956gd1
        ID: 9mnpnzenvg8p8tdbtq4wvbkcz
        Spec:
          EndpointSpec:
            Mode: vip
            Ports:
              - Protocol: tcp
                PublishedPort: 30001
                TargetPort: 6379
          Mode:
            Replicated:
              Replicas: 1
          Name: hopeful_cori
          TaskTemplate:
            ContainerSpec:
              Image: redis
            ForceUpdate: 0
            Placement: {}
            Resources:
              Limits: {}
              Reservations: {}
            RestartPolicy:
              Condition: any
              MaxAttempts: 0
          UpdateConfig:
            FailureAction: pause
            MaxFailureRatio: 0.15
            Monitor: 15000000000
            Parallelism: 1
        UpdatedAt: '2016-06-07T21:07:29.962229872Z'
        Version:
          Index: 19
      properties:
        CreatedAt:
          format: dateTime
          type: string
        Endpoint:
          properties:
            Ports:
              items:
                $ref: '#/components/schemas/EndpointPortConfig'
              type: array
            Spec:
              $ref: '#/components/schemas/EndpointSpec'
            VirtualIPs:
              items:
                properties:
                  Addr:
                    type: string
                  NetworkID:
                    type: string
                type: object
              type: array
          type: object
        ID:
          type: string
        Spec:
          $ref: '#/components/schemas/ServiceSpec'
        UpdateStatus:
          description: The status of a service update.
          properties:
            CompletedAt:
              format: dateTime
              type: string
            Message:
              type: string
            StartedAt:
              format: dateTime
              type: string
            State:
              enum:
                - updating
                - paused
                - completed
              type: string
          type: object
        UpdatedAt:
          format: dateTime
          type: string
        Version:
          properties:
            Index:
              format: int64
              type: integer
          type: object
      type: object
    ServiceSpec:
      description: User modifiable configuration for a service.
      properties:
        EndpointSpec:
          $ref: '#/components/schemas/EndpointSpec'
        Labels:
          additionalProperties:
            type: string
          description: User-defined key/value metadata.
          type: object
        Mode:
          description: Scheduling mode for the service.
          properties:
            Global:
              type: object
            Replicated:
              properties:
                Replicas:
                  format: int64
                  type: integer
              type: object
          type: object
        Name:
          description: Name of the service.
          type: string
        Networks:
          description: Array of network names or IDs to attach the service to.
          items:
            properties:
              Aliases:
                items:
                  type: string
                type: array
              Target:
                type: string
            type: object
          type: array
        TaskTemplate:
          $ref: '#/components/schemas/TaskSpec'
        UpdateConfig:
          description: Specification for the update strategy of the service.
          properties:
            Delay:
              description: 'Amount of time between updates, in nanoseconds.'
              format: int64
              type: integer
            FailureAction:
              description: >-
                Action to take if an updated task fails to run, or stops running
                during the update.
              enum:
                - continue
                - pause
              type: string
            MaxFailureRatio:
              default: 0
              description: >-
                The fraction of tasks that may fail during an update before the
                failure action is invoked, specified as a floating point number
                between 0 and 1.
              type: number
            Monitor:
              description: >-
                Amount of time to monitor each updated task for failures, in
                nanoseconds.
              format: int64
              type: integer
            Parallelism:
              description: >-
                Maximum number of tasks to be updated in one iteration (0 means
                unlimited parallelism).
              format: int64
              type: integer
          type: object
      type: object
    ServiceUpdateResponse:
      example:
        Warning: >-
          unable to pin image doesnotexist:latest to digest: image
          library/doesnotexist:latest not found
      properties:
        Warnings:
          description: Optional warning messages
          items:
            type: string
          type: array
      type: object
    SwarmSpec:
      description: User modifiable swarm configuration.
      example:
        CAConfig:
          NodeCertExpiry: 7776000000000000
        Dispatcher:
          HeartbeatPeriod: 5000000000
        EncryptionConfig:
          AutoLockManagers: false
        JoinTokens:
          Manager: >-
            SWMTKN-1-3pu6hszjas19xyp7ghgosyx9k8atbfcr8p2is99znpy26u2lkl-7p73s1dx5in4tatdymyhg9hu2
          Worker: >-
            SWMTKN-1-3pu6hszjas19xyp7ghgosyx9k8atbfcr8p2is99znpy26u2lkl-1awxwuwd3z9j1z3puu7rcgdbx
        Name: default
        Orchestration:
          TaskHistoryRetentionLimit: 10
        Raft:
          ElectionTick: 3
          HeartbeatTick: 1
          LogEntriesForSlowFollowers: 500
          SnapshotInterval: 10000
      properties:
        CAConfig:
          description: CA configuration.
          properties:
            ExternalCAs:
              description: >-
                Configuration for forwarding signing requests to an external
                certificate authority.
              items:
                properties:
                  Options:
                    additionalProperties:
                      type: string
                    description: >-
                      An object with key/value pairs that are interpreted as
                      protocol-specific options for the external CA driver.
                    type: object
                  Protocol:
                    default: cfssl
                    description: >-
                      Protocol for communication with the external CA (currently
                      only `cfssl` is supported).
                    enum:
                      - cfssl
                    type: string
                  URL:
                    description: URL where certificate signing requests should be sent.
                    type: string
                type: object
              type: array
            NodeCertExpiry:
              description: The duration node certificates are issued for.
              format: int64
              type: integer
          type: object
        Dispatcher:
          description: Dispatcher configuration.
          properties:
            HeartbeatPeriod:
              description: The delay for an agent to send a heartbeat to the dispatcher.
              format: int64
              type: integer
          type: object
        EncryptionConfig:
          description: Parameters related to encryption-at-rest.
          properties:
            AutoLockManagers:
              description: >-
                If set, generate a key and use it to lock data stored on the
                managers.
              type: boolean
          type: object
        Labels:
          additionalProperties:
            type: string
          description: User-defined key/value metadata.
          type: object
        Name:
          description: Name of the swarm.
          type: string
        Orchestration:
          description: Orchestration configuration.
          properties:
            TaskHistoryRetentionLimit:
              description: >-
                The number of historic tasks to keep per instance or node. If
                negative, never remove completed or failed tasks.
              format: int64
              type: integer
          type: object
        Raft:
          description: Raft configuration.
          properties:
            ElectionTick:
              description: >
                The number of ticks that a follower will wait for a message from
                the leader before becoming a candidate and starting an election.
                `ElectionTick` must be greater than `HeartbeatTick`.


                A tick currently defaults to one second, so these translate
                directly to seconds currently, but this is NOT guaranteed.
              type: integer
            HeartbeatTick:
              description: >
                The number of ticks between heartbeats. Every HeartbeatTick
                ticks, the leader will send a heartbeat to the followers.


                A tick currently defaults to one second, so these translate
                directly to seconds currently, but this is NOT guaranteed.
              type: integer
            KeepOldSnapshots:
              description: The number of snapshots to keep beyond the current snapshot.
              format: int64
              type: integer
            LogEntriesForSlowFollowers:
              description: >-
                The number of log entries to keep around to sync up slow
                followers after a snapshot is created.
              format: int64
              type: integer
            SnapshotInterval:
              description: The number of log entries between snapshots.
              format: int64
              type: integer
          type: object
        TaskDefaults:
          description: Defaults for creating tasks in this cluster.
          properties:
            LogDriver:
              description: >
                The log driver to use for tasks created in the orchestrator if
                unspecified by a service.


                Updating this value will only have an affect on new tasks. Old
                tasks will continue use their previously configured log driver
                until recreated.
              properties:
                Name:
                  type: string
                Options:
                  additionalProperties:
                    type: string
                  type: object
              type: object
          type: object
      type: object
    Task:
      example:
        CreatedAt: '2016-06-07T21:07:31.171892745Z'
        DesiredState: running
        ID: 0kzzo1i0y4jz6027t0k7aezc7
        NetworksAttachments:
          - Addresses:
              - 10.255.0.10/16
            Network:
              CreatedAt: '2016-06-07T20:31:11.912919752Z'
              DriverState:
                Name: overlay
                Options:
                  com.docker.network.driver.overlay.vxlanid_list: '256'
              ID: 4qvuz4ko70xaltuqbt8956gd1
              IPAMOptions:
                Configs:
                  - Gateway: 10.255.0.1
                    Subnet: 10.255.0.0/16
                Driver:
                  Name: default
              Spec:
                DriverConfiguration: {}
                IPAMOptions:
                  Configs:
                    - Gateway: 10.255.0.1
                      Subnet: 10.255.0.0/16
                  Driver: {}
                Labels:
                  com.docker.swarm.internal: 'true'
                Name: ingress
              UpdatedAt: '2016-06-07T21:07:29.955277358Z'
              Version:
                Index: 18
        NodeID: 60gvrl6tm78dmak4yl7srz94v
        ServiceID: 9mnpnzenvg8p8tdbtq4wvbkcz
        Slot: 1
        Spec:
          ContainerSpec:
            Image: redis
          Placement: {}
          Resources:
            Limits: {}
            Reservations: {}
          RestartPolicy:
            Condition: any
            MaxAttempts: 0
        Status:
          ContainerStatus:
            ContainerID: e5d62702a1b48d01c3e02ca1e0212a250801fa8d67caca0b6f35919ebc12f035
            PID: 677
          Message: started
          State: running
          Timestamp: '2016-06-07T21:07:31.290032978Z'
        UpdatedAt: '2016-06-07T21:07:31.376370513Z'
        Version:
          Index: 71
      properties:
        CreatedAt:
          format: dateTime
          type: string
        DesiredState:
          $ref: '#/components/schemas/TaskState'
        ID:
          description: The ID of the task.
          type: string
        Labels:
          additionalProperties:
            type: string
          description: User-defined key/value metadata.
          type: object
        Name:
          description: Name of the task.
          type: string
        NodeID:
          description: The ID of the node that this task is on.
          type: string
        ServiceID:
          description: The ID of the service this task is part of.
          type: string
        Slot:
          type: integer
        Spec:
          $ref: '#/components/schemas/TaskSpec'
        Status:
          properties:
            ContainerStatus:
              properties:
                ContainerID:
                  type: string
                ExitCode:
                  type: integer
                PID:
                  type: integer
              type: object
            Err:
              type: string
            Message:
              type: string
            State:
              $ref: '#/components/schemas/TaskState'
            Timestamp:
              format: dateTime
              type: string
          type: object
        UpdatedAt:
          format: dateTime
          type: string
        Version:
          properties:
            Index:
              format: int64
              type: integer
          type: object
      type: object
    TaskSpec:
      description: User modifiable task configuration.
      properties:
        ContainerSpec:
          properties:
            Args:
              description: Arguments to the command.
              items:
                type: string
              type: array
            Command:
              description: The command to be run in the image.
              items:
                type: string
              type: array
            DNSConfig:
              description: >-
                Specification for DNS related configurations in resolver
                configuration file (`resolv.conf`).
              properties:
                Nameservers:
                  description: The IP addresses of the name servers.
                  items:
                    type: string
                  type: array
                Options:
                  description: >-
                    A list of internal resolver variables to be modified (e.g.,
                    `debug`, `ndots:3`, etc.).
                  items:
                    type: string
                  type: array
                Search:
                  description: A search list for host-name lookup.
                  items:
                    type: string
                  type: array
              type: object
            Dir:
              description: The working directory for commands to run in.
              type: string
            Env:
              description: A list of environment variables in the form `VAR=value`.
              items:
                type: string
              type: array
            Image:
              description: The image name to use for the container.
              type: string
            Labels:
              additionalProperties:
                type: string
              description: User-defined key/value data.
              type: object
            Mounts:
              description: >-
                Specification for mounts to be added to containers created as
                part of the service.
              items:
                $ref: '#/components/schemas/Mount'
              type: array
            StopGracePeriod:
              description: >-
                Amount of time to wait for the container to terminate before
                forcefully killing it.
              format: int64
              type: integer
            TTY:
              description: Whether a pseudo-TTY should be allocated.
              type: boolean
            User:
              description: The user inside the container.
              type: string
          type: object
        ForceUpdate:
          description: >-
            A counter that triggers an update even if no relevant parameters
            have been changed.
          type: integer
        LogDriver:
          description: >-
            Specifies the log driver to use for tasks created from this spec. If
            not present, the default one for the swarm will be used, finally
            falling back to the engine default if not specified.
          properties:
            Name:
              type: string
            Options:
              additionalProperties:
                type: string
              type: object
          type: object
        Networks:
          items:
            properties:
              Aliases:
                items:
                  type: string
                type: array
              Target:
                type: string
            type: object
          type: array
        Placement:
          properties:
            Constraints:
              description: An array of constraints.
              items:
                type: string
              type: array
          type: object
        Resources:
          description: >-
            Resource requirements which apply to each individual container
            created as part of the service.
          properties:
            Limits:
              description: Define resources limits.
              properties:
                MemoryBytes:
                  description: Memory limit in Bytes.
                  format: int64
                  type: integer
                NanoCPUs:
                  description: CPU limit in units of 10<sup>-9</sup> CPU shares.
                  format: int64
                  type: integer
              type: object
            Reservation:
              description: Define resources reservation.
              properties:
                MemoryBytes:
                  description: Memory reservation in Bytes.
                  format: int64
                  type: integer
                NanoCPUs:
                  description: CPU reservation in units of 10<sup>-9</sup> CPU shares.
                  format: int64
                  type: integer
              type: object
          type: object
        RestartPolicy:
          description: >-
            Specification for the restart policy which applies to containers
            created as part of this service.
          properties:
            Condition:
              description: Condition for restart.
              enum:
                - none
                - on-failure
                - any
              type: string
            Delay:
              description: Delay between restart attempts.
              format: int64
              type: integer
            MaxAttempts:
              default: 0
              description: >-
                Maximum attempts to restart a given container before giving up
                (default value is 0, which is ignored).
              format: int64
              type: integer
            Window:
              default: 0
              description: >-
                Windows is the time window used to evaluate the restart policy
                (default value is 0, which is unbounded).
              format: int64
              type: integer
          type: object
      type: object
    TaskState:
      enum:
        - new
        - allocated
        - pending
        - assigned
        - accepted
        - preparing
        - ready
        - starting
        - running
        - complete
        - shutdown
        - failed
        - rejected
      type: string
    ThrottleDevice:
      properties:
        Path:
          description: Device path
          type: string
        Rate:
          description: Rate
          format: int64
          minimum: 0
          type: integer
      type: object
    Volume:
      example:
        Driver: custom
        Labels:
          com.example.some-label: some-value
          com.example.some-other-label: some-other-value
        Mountpoint: /var/lib/docker/volumes/tardis
        Name: tardis
        Scope: local
        Status:
          hello: world
      properties:
        Driver:
          description: Name of the volume driver used by the volume.
          nullable: false
          type: string
        Labels:
          additionalProperties:
            type: string
          description: User-defined key/value metadata.
          nullable: false
          type: object
        Mountpoint:
          description: Mount path of the volume on the host.
          nullable: false
          type: string
        Name:
          description: Name of the volume.
          nullable: false
          type: string
        Options:
          additionalProperties:
            type: string
          description: The driver specific options used when creating the volume.
          type: object
        Scope:
          default: local
          description: >-
            The level at which the volume exists. Either `global` for
            cluster-wide, or `local` for machine level.
          enum:
            - local
            - global
          nullable: false
          type: string
        Status:
          additionalProperties:
            type: object
          description: |
            Low-level details about the volume, provided by the volume driver.
            Details are returned as a map with key/value pairs:
            `{"key":"value","key2":"value2"}`.

            The `Status` field is optional, and is omitted if the volume driver
            does not support this feature.
          type: object
        UsageData:
          properties:
            RefCount:
              default: -1
              description: The number of containers referencing this volume.
              nullable: false
              type: integer
            Size:
              default: -1
              description: The disk space used by the volume (local driver only)
              nullable: false
              type: integer
          required:
            - Size
            - RefCount
          type: object
      required:
        - Name
        - Driver
        - Mountpoint
        - Labels
        - Scope
        - Options
      type: object
openapi: 3.0.0
servers:
  - url: /v1.25

